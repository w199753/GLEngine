<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DualityPrimitives</name>
    </assembly>
    <members>
        <member name="T:Duality.Drawing.ColorHsva">
            <summary>
            Represents a 16-byte Hsva color value.
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorHsva.White">
            <summary>
            White.
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorHsva.Black">
            <summary>
            Black.
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorHsva.Red">
            <summary>
            Fully saturated and max-brightness red.
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorHsva.Green">
            <summary>
            Fully saturated and max-brightness green.
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorHsva.Blue">
            <summary>
            Fully saturated and max-brightness blue.
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorHsva.VeryLightGrey">
            <summary>
            A very light grey.
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorHsva.LightGrey">
            <summary>
            A light grey.
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorHsva.Grey">
            <summary>
            Medium grey.
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorHsva.DarkGrey">
            <summary>
            A dark grey.
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorHsva.VeryDarkGrey">
            <summary>
            A very dark grey.
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorHsva.TransparentWhite">
            <summary>
            Transparent white. Completely invisible, when drawn, but might make a difference as
            a background color.
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorHsva.TransparentBlack">
            <summary>
            Transparent black. Completely invisible, when drawn, but might make a difference as
            a background color.
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorHsva.H">
            <summary>
            Hue component as float [0.0f - 1.0f].
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorHsva.S">
            <summary>
            Saturation component as float [0.0f - 1.0f].
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorHsva.V">
            <summary>
            Value component as float [0.0f - 1.0f].
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorHsva.A">
            <summary>
            Alpha component as float [0.0f - 1.0f].
            </summary>
        </member>
        <member name="M:Duality.Drawing.ColorHsva.#ctor(Duality.Drawing.ColorHsva)">
            <summary>
            Creates a new color based on an existing one. This is basically a copy-constructor.
            </summary>
            <param name="clr"></param>
        </member>
        <member name="M:Duality.Drawing.ColorHsva.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new color.
            </summary>
            <param name="h">Hue as float [0.0f - 1.0f].</param>
            <param name="s">Saturation as float [0.0f - 1.0f].</param>
            <param name="v">Value as float [0.0f - 1.0f].</param>
            <param name="a">Alpha as float [0.0f - 1.0f].</param>
        </member>
        <member name="M:Duality.Drawing.ColorHsva.GetLuminance">
            <summary>
            Calculates the colors luminance. It is an approximation on how bright the color actually looks to
            the human eye, weighting each (Rgba) color component differently.
            </summary>
            <returns>The colors luminance as float [0.0f - 1.0f].</returns>
        </member>
        <member name="M:Duality.Drawing.ColorHsva.WithHue(System.Single)">
            <summary>
            Returns a new version of the color with an adjusted hue component.
            </summary>
            <param name="h">The new hue component as float [0.0f - 1.0f].</param>
            <returns>A new color with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Drawing.ColorHsva.WithSaturation(System.Single)">
            <summary>
            Returns a new version of the color with an adjusted saturation component.
            </summary>
            <param name="s">The new saturation component as float [0.0f - 1.0f].</param>
            <returns>A new color with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Drawing.ColorHsva.WithValue(System.Single)">
            <summary>
            Returns a new version of the color with an adjusted value component.
            </summary>
            <param name="v">The new value component as float [0.0f - 1.0f].</param>
            <returns>A new color with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Drawing.ColorHsva.WithAlpha(System.Single)">
            <summary>
            Returns a new version of the color with an adjusted alpha component.
            </summary>
            <param name="a">The new alpha component as float [0.0f - 1.0f].</param>
            <returns>A new color with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Drawing.ColorHsva.ToIntRgba">
            <summary>
            Converts the color to int-Rgba.
            </summary>
        </member>
        <member name="M:Duality.Drawing.ColorHsva.ToIntArgb">
            <summary>
            Converts the color to int-Argb.
            </summary>
        </member>
        <member name="M:Duality.Drawing.ColorHsva.ToRgba">
            <summary>
            Converts the color to Rgba.
            </summary>
        </member>
        <member name="M:Duality.Drawing.ColorHsva.SetIntRgba(System.Int32)">
            <summary>
            Adjusts the color to match the specified int-Rgba color.
            </summary>
            <param name="rgba"></param>
        </member>
        <member name="M:Duality.Drawing.ColorHsva.SetIntArgb(System.Int32)">
            <summary>
            Adjusts the color to match the specified int-Argb color.
            </summary>
            <param name="argb"></param>
        </member>
        <member name="M:Duality.Drawing.ColorHsva.SetRgba(Duality.Drawing.ColorRgba)">
            <summary>
            Adjusts the color to match the specified Rgba color.
            </summary>
            <param name="rgba"></param>
        </member>
        <member name="M:Duality.Drawing.ColorHsva.Equals(Duality.Drawing.ColorHsva)">
            <summary>
            Returns whether this color equals the specified one.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Duality.Drawing.ColorHsva.FromIntRgba(System.Int32)">
            <summary>
            Creates a new color based on an int-Rgba value.
            </summary>
            <param name="rgba"></param>
        </member>
        <member name="M:Duality.Drawing.ColorHsva.FromIntArgb(System.Int32)">
            <summary>
            Creates a new color based on an int-Argb value.
            </summary>
            <param name="argb"></param>
        </member>
        <member name="M:Duality.Drawing.ColorHsva.FromRgba(Duality.Drawing.ColorRgba)">
            <summary>
            Creates a new color based on a Rgba value.
            </summary>
            <param name="rgba"></param>
        </member>
        <member name="M:Duality.Drawing.ColorHsva.op_Equality(Duality.Drawing.ColorHsva,Duality.Drawing.ColorHsva)">
            <summary>
            Returns whether two colors are equal.
            </summary>
            <param name="left">The first color.</param>
            <param name="right">The second color.</param>
        </member>
        <member name="M:Duality.Drawing.ColorHsva.op_Inequality(Duality.Drawing.ColorHsva,Duality.Drawing.ColorHsva)">
            <summary>
            Returns whether two colors are unequal.
            </summary>
            <param name="left">The first color.</param>
            <param name="right">The second color.</param>
        </member>
        <member name="T:Duality.Drawing.ColorRgba">
            <summary>
            Represents a 4-byte Rgba color value.
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorRgba.White">
            <summary>
            White.
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorRgba.Black">
            <summary>
            Black.
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorRgba.Red">
            <summary>
            Fully saturated and max-brightness red. Also known as [255,0,0].
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorRgba.Green">
            <summary>
            Fully saturated and max-brightness green. Also known as [0,255,0].
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorRgba.Blue">
            <summary>
            Fully saturated and max-brightness blue. Also known as [0,0,255].
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorRgba.Yellow">
            <summary>
            Fully saturated and max-brightness yellow. Also known as [255,255,0].
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorRgba.VeryLightGrey">
            <summary>
            A very light grey. Value: 224.
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorRgba.LightGrey">
            <summary>
            A light grey. Value: 192.
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorRgba.Grey">
            <summary>
            Medium grey. Value: 128.
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorRgba.DarkGrey">
            <summary>
            A dark grey. Value: 64.
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorRgba.VeryDarkGrey">
            <summary>
            A very dark grey. Value: 32.
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorRgba.TransparentWhite">
            <summary>
            Transparent white. Completely invisible, when drawn, but might make a difference as
            a background color.
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorRgba.TransparentBlack">
            <summary>
            Transparent black. Completely invisible, when drawn, but might make a difference as
            a background color.
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorRgba.R">
            <summary>
            Red color component.
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorRgba.G">
            <summary>
            Green color component.
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorRgba.B">
            <summary>
            Blue color component.
            </summary>
        </member>
        <member name="F:Duality.Drawing.ColorRgba.A">
            <summary>
            Alpha color component. Usually treated as opacity.
            </summary>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.#ctor(Duality.Drawing.ColorRgba)">
            <summary>
            Creates a new color based on an existing one. This is basically a copy-constructor.
            </summary>
            <param name="clr"></param>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.#ctor(System.Int32)">
            <summary>
            Creates a new color based on an int-Rgba value.
            </summary>
            <param name="rgba"></param>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new color.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <param name="a">The alpha component.</param>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.#ctor(System.Byte,System.Byte)">
            <summary>
            Creates a new color based on value (brightness) and alpha.
            </summary>
            <param name="value">The value / brightness of the color.</param>
            <param name="a">The colors alpha value.</param>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new color.
            </summary>
            <param name="r">The red component as float [0.0f - 1.0f].</param>
            <param name="g">The green component as float [0.0f - 1.0f].</param>
            <param name="b">The blue component as float [0.0f - 1.0f].</param>
            <param name="a">The alpha component as float [0.0f - 1.0f].</param>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new color based on value (brightness) and alpha.
            </summary>
            <param name="value">The value / brightness of the color as float [0.0f - 1.0f].</param>
            <param name="a">The colors alpha value as float [0.0f - 1.0f].</param>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.WithRed(System.Byte)">
            <summary>
            Returns a new version of the color with an adjusted red component.
            </summary>
            <param name="r">The new red component.</param>
            <returns>A new color with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.WithGreen(System.Byte)">
            <summary>
            Returns a new version of the color with an adjusted green component.
            </summary>
            <param name="g">The new green component.</param>
            <returns>A new color with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.WithBlue(System.Byte)">
            <summary>
            Returns a new version of the color with an adjusted blue component.
            </summary>
            <param name="b">The new blue component.</param>
            <returns>A new color with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.WithAlpha(System.Byte)">
            <summary>
            Returns a new version of the color with an adjusted alpha component.
            </summary>
            <param name="a">The new alpha component.</param>
            <returns>A new color with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.WithRed(System.Single)">
            <summary>
            Returns a new version of the color with an adjusted red component.
            </summary>
            <param name="r">The new red component as float [0.0f - 1.0f].</param>
            <returns>A new color with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.WithGreen(System.Single)">
            <summary>
            Returns a new version of the color with an adjusted green component.
            </summary>
            <param name="g">The new green component as float [0.0f - 1.0f].</param>
            <returns>A new color with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.WithBlue(System.Single)">
            <summary>
            Returns a new version of the color with an adjusted blue component.
            </summary>
            <param name="b">The new blue component as float [0.0f - 1.0f].</param>
            <returns>A new color with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.WithAlpha(System.Single)">
            <summary>
            Returns a new version of the color with an adjusted alpha component.
            </summary>
            <param name="a">The new alpha component as float [0.0f - 1.0f].</param>
            <returns>A new color with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.GetLuminance">
            <summary>
            Calculates the colors luminance. It is an approximation on how bright the color actually looks to
            the human eye, weighting each color component differently.
            </summary>
            <returns>The colors luminance as float [0.0f - 1.0f].</returns>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.ToIntRgba">
            <summary>
            Converts the color to int-Rgba.
            </summary>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.ToIntArgb">
            <summary>
            Converts the color to int-Argb.
            </summary>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.ToHsva">
            <summary>
            Converts the color to Hsva.
            </summary>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.SetIntArgb(System.Int32)">
            <summary>
            Adjusts the color to match the specified int-Argb color.
            </summary>
            <param name="argb"></param>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.SetIntRgba(System.Int32)">
            <summary>
            Adjusts the color to match the specified int-Rgba color.
            </summary>
            <param name="rgba"></param>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.SetHsva(Duality.Drawing.ColorHsva)">
            <summary>
            Adjusts the color to match the specified Hsva color.
            </summary>
            <param name="hsva"></param>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.Equals(Duality.Drawing.ColorRgba)">
            <summary>
            Returns whether this color equals the specified one.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.FromIntRgba(System.Int32)">
            <summary>
            Creates a new color based on an int-Rgba value.
            </summary>
            <param name="rgba"></param>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.FromIntArgb(System.Int32)">
            <summary>
            Creates a new color based on an int-Argb value.
            </summary>
            <param name="argb"></param>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.FromHsva(Duality.Drawing.ColorHsva)">
            <summary>
            Creates a new color based on a Hsva value.
            </summary>
            <param name="hsva"></param>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.Lerp(Duality.Drawing.ColorRgba,Duality.Drawing.ColorRgba,System.Single)">
            <summary>
            Mixes two colors by performing a linear interpolation between both.
            </summary>
            <param name="first">The first color.</param>
            <param name="second">The second color.</param>
            <param name="factor">The linear interpolation value. Zero equals the first color, one equals the second color.</param>
            <returns>The interpolated / mixed color.</returns>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.op_Equality(Duality.Drawing.ColorRgba,Duality.Drawing.ColorRgba)">
            <summary>
            Returns whether two colors are equal.
            </summary>
            <param name="left">The first color.</param>
            <param name="right">The second color.</param>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.op_Inequality(Duality.Drawing.ColorRgba,Duality.Drawing.ColorRgba)">
            <summary>
            Returns whether two colors are unequal.
            </summary>
            <param name="left">The first color.</param>
            <param name="right">The second color.</param>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.op_Addition(Duality.Drawing.ColorRgba,Duality.Drawing.ColorRgba)">
            <summary>
            Adds two colors component-wise.
            </summary>
            <param name="left">The first color.</param>
            <param name="right">The second color.</param>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.op_Subtraction(Duality.Drawing.ColorRgba,Duality.Drawing.ColorRgba)">
            <summary>
            Subtracts the second color from the first component-wise.
            </summary>
            <param name="left">The first color.</param>
            <param name="right">The second color.</param>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.op_Multiply(Duality.Drawing.ColorRgba,Duality.Drawing.ColorRgba)">
            <summary>
            Multiplies two colors component-wise.
            </summary>
            <param name="left">The first color.</param>
            <param name="right">The second color.</param>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.op_Multiply(Duality.Drawing.ColorRgba,System.Single)">
            <summary>
            Scales a color by the specified factor. This affects color and alpha equally.
            </summary>
            <param name="left">The color to scale.</param>
            <param name="right">The scaling factor.</param>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.Add(Duality.Drawing.ColorRgba@,Duality.Drawing.ColorRgba@,Duality.Drawing.ColorRgba@)">
            <summary>
            Adds two colors component-wise.
            </summary>
            <param name="left">The first color.</param>
            <param name="right">The second color.</param>
            <param name="result"></param>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.Subtract(Duality.Drawing.ColorRgba@,Duality.Drawing.ColorRgba@,Duality.Drawing.ColorRgba@)">
            <summary>
            Subtracts two colors component-wise.
            </summary>
            <param name="left">The first color.</param>
            <param name="right">The second color.</param>
            <param name="result"></param>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.Multiply(Duality.Drawing.ColorRgba@,Duality.Drawing.ColorRgba@,Duality.Drawing.ColorRgba@)">
            <summary>
            Multiplies two colors component-wise.
            </summary>
            <param name="left">The first color.</param>
            <param name="right">The second color.</param>
            <param name="result"></param>
        </member>
        <member name="M:Duality.Drawing.ColorRgba.Scale(Duality.Drawing.ColorRgba@,System.Single,Duality.Drawing.ColorRgba@)">
            <summary>
            Scales a color by the specified factor. This affects color and alpha equally.
            </summary>
            <param name="left">The color that is to be scaled.</param>
            <param name="right">The scaling factor.</param>
            <param name="result"></param>
        </member>
        <member name="T:Duality.Drawing.IColorData">
            <summary>
            A general interface for different types of color data.
            </summary>
        </member>
        <member name="M:Duality.Drawing.IColorData.ToIntRgba">
            <summary>
            Converts the color to a <see cref="T:System.UInt32"/>-Rgba value.
            </summary>
        </member>
        <member name="M:Duality.Drawing.IColorData.SetIntRgba(System.Int32)">
            <summary>
            Sets the color base ond a <see cref="T:System.UInt32"/>-Rgba value.
            </summary>
            <param name="rgba"></param>
        </member>
        <member name="M:Duality.Drawing.IColorData.ToIntArgb">
            <summary>
            Converts the color to a <see cref="T:System.UInt32"/>-Argb value.
            </summary>
        </member>
        <member name="M:Duality.Drawing.IColorData.SetIntArgb(System.Int32)">
            <summary>
            Sets the color base ond a <see cref="T:System.UInt32"/>-Argb value.
            </summary>
            <param name="argb"></param>
        </member>
        <member name="T:Duality.Alignment">
            <summary>
            Represents a 2D spatial alignment.
            </summary>
        </member>
        <member name="F:Duality.Alignment.Center">
            <summary>
            Align to its center.
            </summary>
        </member>
        <member name="F:Duality.Alignment.Left">
            <summary>
            Align to its left.
            </summary>
        </member>
        <member name="F:Duality.Alignment.Right">
            <summary>
            Align to its right.
            </summary>
        </member>
        <member name="F:Duality.Alignment.Top">
            <summary>
            Align to its top.
            </summary>
        </member>
        <member name="F:Duality.Alignment.Bottom">
            <summary>
            Align to its bottom.
            </summary>
        </member>
        <member name="F:Duality.Alignment.TopLeft">
            <summary>
            Align to its top left.
            </summary>
        </member>
        <member name="F:Duality.Alignment.TopRight">
            <summary>
            Align to its top right.
            </summary>
        </member>
        <member name="F:Duality.Alignment.BottomLeft">
            <summary>
            Align to its bottom left.
            </summary>
        </member>
        <member name="F:Duality.Alignment.BottomRight">
            <summary>
            Align to its bottom right.
            </summary>
        </member>
        <member name="M:Duality.ExtMethodsAlignment.ApplyTo(Duality.Alignment,Duality.Vector2@,Duality.Vector2@)">
            <summary>
            Applies the alignment to the specified vector.
            </summary>
            <param name="align"></param>
            <param name="vec"></param>
            <param name="size"></param>
        </member>
        <member name="M:Duality.ExtMethodsAlignment.ApplyTo(Duality.Alignment,Duality.Vector2@,Duality.Vector2)">
            <summary>
            Applies the alignment to the specified vector.
            </summary>
            <param name="align"></param>
            <param name="vec"></param>
            <param name="size"></param>
        </member>
        <member name="M:Duality.ExtMethodsAlignment.ApplyTo(Duality.Alignment,Duality.Vector2,Duality.Vector2)">
            <summary>
            Applies the alignment to the specified vector.
            </summary>
            <param name="align"></param>
            <param name="vec"></param>
            <param name="size"></param>
        </member>
        <member name="M:Duality.ExtMethodsAlignment.ApplyTo(Duality.Alignment,System.Double@,System.Double@,System.Double,System.Double)">
            <summary>
            Applies the alignment to the specified vector.
            </summary>
            <param name="align"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Duality.ExtMethodsAlignment.ApplyTo(Duality.Alignment,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Applies the alignment to the specified vector.
            </summary>
            <param name="align"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Duality.BoundingBox.CreateFromPoints(System.Collections.Generic.IEnumerable{Duality.Vector3})">
            <summary>
            Create a bounding box from the given list of points.
            </summary>
            <param name="points">The list of Vector3 instances defining the point cloud to bound</param>
            <returns>A bounding box that encapsulates the given point cloud.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the given list has no points.</exception>
        </member>
        <member name="T:Duality.BoundingFrustum">
            <summary>
            Defines a viewing frustum for intersection operations.
            </summary>
        </member>
        <member name="F:Duality.BoundingFrustum.PlaneCount">
            <summary>
            The number of planes in the frustum.
            </summary>
        </member>
        <member name="F:Duality.BoundingFrustum.CornerCount">
            <summary>
            The number of corner points in the frustum.
            </summary>
        </member>
        <member name="P:Duality.BoundingFrustum.Matrix">
            <summary>
            Gets or sets the <see cref="P:Duality.BoundingFrustum.Matrix"/> of the frustum.
            </summary>
        </member>
        <member name="P:Duality.BoundingFrustum.Near">
            <summary>
            Gets the near plane of the frustum.
            </summary>
        </member>
        <member name="P:Duality.BoundingFrustum.Far">
            <summary>
            Gets the far plane of the frustum.
            </summary>
        </member>
        <member name="P:Duality.BoundingFrustum.Left">
            <summary>
            Gets the left plane of the frustum.
            </summary>
        </member>
        <member name="P:Duality.BoundingFrustum.Right">
            <summary>
            Gets the right plane of the frustum.
            </summary>
        </member>
        <member name="P:Duality.BoundingFrustum.Top">
            <summary>
            Gets the top plane of the frustum.
            </summary>
        </member>
        <member name="P:Duality.BoundingFrustum.Bottom">
            <summary>
            Gets the bottom plane of the frustum.
            </summary>
        </member>
        <member name="M:Duality.BoundingFrustum.#ctor(Duality.Matrix4)">
            <summary>
            Creates a new instance of <see cref="T:Duality.BoundingFrustum"/> class.
            </summary>
            <param name="value">Combined matrix which usually is (View * Projection).</param>
        </member>
        <member name="M:Duality.BoundingFrustum.op_Equality(Duality.BoundingFrustum,Duality.BoundingFrustum)">
            <summary>
            Compares whether two <see cref="T:Duality.BoundingFrustum"/> instances are equal.
            </summary>
            <param name="a"><see cref="T:Duality.BoundingFrustum"/> instance on the left of the equal sign.</param>
            <param name="b"><see cref="T:Duality.BoundingFrustum"/> instance on the right of the equal sign.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Duality.BoundingFrustum.op_Inequality(Duality.BoundingFrustum,Duality.BoundingFrustum)">
            <summary>
            Compares whether two <see cref="T:Duality.BoundingFrustum"/> instances are not equal.
            </summary>
            <param name="a"><see cref="T:Duality.BoundingFrustum"/> instance on the left of the not equal sign.</param>
            <param name="b"><see cref="T:Duality.BoundingFrustum"/> instance on the right of the not equal sign.</param>
            <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Duality.BoundingFrustum.Contains(Duality.BoundingBox)">
            <summary>
            Containment test between this <see cref="T:Duality.BoundingFrustum"/> and specified <see cref="T:Duality.BoundingBox"/>.
            </summary>
            <param name="box">A <see cref="T:Duality.BoundingBox"/> for testing.</param>
            <returns>Result of testing for containment between this <see cref="T:Duality.BoundingFrustum"/> and specified <see cref="T:Duality.BoundingBox"/>.</returns>
        </member>
        <member name="M:Duality.BoundingFrustum.Contains(Duality.BoundingBox@,Duality.ContainmentType@)">
            <summary>
            Containment test between this <see cref="T:Duality.BoundingFrustum"/> and specified <see cref="T:Duality.BoundingBox"/>.
            </summary>
            <param name="box">A <see cref="T:Duality.BoundingBox"/> for testing.</param>
            <param name="result">Result of testing for containment between this <see cref="T:Duality.BoundingFrustum"/> and specified <see cref="T:Duality.BoundingBox"/> as an output parameter.</param>
        </member>
        <member name="M:Duality.BoundingFrustum.Contains(Duality.BoundingFrustum)">
            <summary>
            Containment test between this <see cref="T:Duality.BoundingFrustum"/> and specified <see cref="T:Duality.BoundingFrustum"/>.
            </summary>
            <param name="frustum">A <see cref="T:Duality.BoundingFrustum"/> for testing.</param>
            <returns>Result of testing for containment between this <see cref="T:Duality.BoundingFrustum"/> and specified <see cref="T:Duality.BoundingFrustum"/>.</returns>
        </member>
        <member name="M:Duality.BoundingFrustum.Contains(Duality.BoundingSphere)">
            <summary>
            Containment test between this <see cref="T:Duality.BoundingFrustum"/> and specified <see cref="T:Duality.BoundingSphere"/>.
            </summary>
            <param name="sphere">A <see cref="T:Duality.BoundingSphere"/> for testing.</param>
            <returns>Result of testing for containment between this <see cref="T:Duality.BoundingFrustum"/> and specified <see cref="T:Duality.BoundingSphere"/>.</returns>
        </member>
        <member name="M:Duality.BoundingFrustum.Contains(Duality.BoundingSphere@,Duality.ContainmentType@)">
            <summary>
            Containment test between this <see cref="T:Duality.BoundingFrustum"/> and specified <see cref="T:Duality.BoundingSphere"/>.
            </summary>
            <param name="sphere">A <see cref="T:Duality.BoundingSphere"/> for testing.</param>
            <param name="result">Result of testing for containment between this <see cref="T:Duality.BoundingFrustum"/> and specified <see cref="T:Duality.BoundingSphere"/> as an output parameter.</param>
        </member>
        <member name="M:Duality.BoundingFrustum.Contains(Duality.Vector3)">
            <summary>
            Containment test between this <see cref="T:Duality.BoundingFrustum"/> and specified <see cref="T:Duality.Vector3"/>.
            </summary>
            <param name="point">A <see cref="T:Duality.Vector3"/> for testing.</param>
            <returns>Result of testing for containment between this <see cref="T:Duality.BoundingFrustum"/> and specified <see cref="T:Duality.Vector3"/>.</returns>
        </member>
        <member name="M:Duality.BoundingFrustum.Contains(Duality.Vector3@,Duality.ContainmentType@)">
            <summary>
            Containment test between this <see cref="T:Duality.BoundingFrustum"/> and specified <see cref="T:Duality.Vector3"/>.
            </summary>
            <param name="point">A <see cref="T:Duality.Vector3"/> for testing.</param>
            <param name="result">Result of testing for containment between this <see cref="T:Duality.BoundingFrustum"/> and specified <see cref="T:Duality.Vector3"/> as an output parameter.</param>
        </member>
        <member name="M:Duality.BoundingFrustum.Equals(Duality.BoundingFrustum)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:Duality.BoundingFrustum"/>.
            </summary>
            <param name="other">The <see cref="T:Duality.BoundingFrustum"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Duality.BoundingFrustum.Equals(System.Object)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:Duality.BoundingFrustum"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Duality.BoundingFrustum.GetCorners">
            <summary>
            Returns a copy of internal corners array.
            </summary>
            <returns>The array of corners.</returns>
        </member>
        <member name="M:Duality.BoundingFrustum.GetCorners(Duality.Vector3[])">
            <summary>
            Returns a copy of internal corners array.
            </summary>
            <param name="corners">The array which values will be replaced to corner values of this instance. It must have size of <see cref="F:Duality.BoundingFrustum.CornerCount"/>.</param>
        </member>
        <member name="M:Duality.BoundingFrustum.GetHashCode">
            <summary>
            Gets the hash code of this <see cref="T:Duality.BoundingFrustum"/>.
            </summary>
            <returns>Hash code of this <see cref="T:Duality.BoundingFrustum"/>.</returns>
        </member>
        <member name="M:Duality.BoundingFrustum.Intersects(Duality.BoundingBox)">
            <summary>
            Gets whether or not a specified <see cref="T:Duality.BoundingBox"/> intersects with this <see cref="T:Duality.BoundingFrustum"/>.
            </summary>
            <param name="box">A <see cref="T:Duality.BoundingBox"/> for intersection test.</param>
            <returns><c>true</c> if specified <see cref="T:Duality.BoundingBox"/> intersects with this <see cref="T:Duality.BoundingFrustum"/>; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Duality.BoundingFrustum.Intersects(Duality.BoundingBox@,System.Boolean@)">
            <summary>
            Gets whether or not a specified <see cref="T:Duality.BoundingBox"/> intersects with this <see cref="T:Duality.BoundingFrustum"/>.
            </summary>
            <param name="box">A <see cref="T:Duality.BoundingBox"/> for intersection test.</param>
            <param name="result"><c>true</c> if specified <see cref="T:Duality.BoundingBox"/> intersects with this <see cref="T:Duality.BoundingFrustum"/>; <c>false</c> otherwise as an output parameter.</param>
        </member>
        <member name="M:Duality.BoundingFrustum.Intersects(Duality.BoundingFrustum)">
            <summary>
            Gets whether or not a specified <see cref="T:Duality.BoundingFrustum"/> intersects with this <see cref="T:Duality.BoundingFrustum"/>.
            </summary>
            <param name="frustum">An other <see cref="T:Duality.BoundingFrustum"/> for intersection test.</param>
            <returns><c>true</c> if other <see cref="T:Duality.BoundingFrustum"/> intersects with this <see cref="T:Duality.BoundingFrustum"/>; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Duality.BoundingFrustum.Intersects(Duality.BoundingSphere)">
            <summary>
            Gets whether or not a specified <see cref="T:Duality.BoundingSphere"/> intersects with this <see cref="T:Duality.BoundingFrustum"/>.
            </summary>
            <param name="sphere">A <see cref="T:Duality.BoundingSphere"/> for intersection test.</param>
            <returns><c>true</c> if specified <see cref="T:Duality.BoundingSphere"/> intersects with this <see cref="T:Duality.BoundingFrustum"/>; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Duality.BoundingFrustum.Intersects(Duality.BoundingSphere@,System.Boolean@)">
            <summary>
            Gets whether or not a specified <see cref="T:Duality.BoundingSphere"/> intersects with this <see cref="T:Duality.BoundingFrustum"/>.
            </summary>
            <param name="sphere">A <see cref="T:Duality.BoundingSphere"/> for intersection test.</param>
            <param name="result"><c>true</c> if specified <see cref="T:Duality.BoundingSphere"/> intersects with this <see cref="T:Duality.BoundingFrustum"/>; <c>false</c> otherwise as an output parameter.</param>
        </member>
        <member name="M:Duality.BoundingFrustum.Intersects(Duality.Plane)">
            <summary>
            Gets type of intersection between specified <see cref="T:Duality.Plane"/> and this <see cref="T:Duality.BoundingFrustum"/>.
            </summary>
            <param name="plane">A <see cref="T:Duality.Plane"/> for intersection test.</param>
            <returns>A plane intersection type.</returns>
        </member>
        <member name="M:Duality.BoundingFrustum.Intersects(Duality.Plane@,Duality.PlaneIntersectionType@)">
            <summary>
            Gets type of intersection between specified <see cref="T:Duality.Plane"/> and this <see cref="T:Duality.BoundingFrustum"/>.
            </summary>
            <param name="plane">A <see cref="T:Duality.Plane"/> for intersection test.</param>
            <param name="result">A plane intersection type as an output parameter.</param>
        </member>
        <member name="M:Duality.BoundingFrustum.Intersects(Duality.Ray)">
            <summary>
            Gets the distance of intersection of <see cref="T:Duality.Ray"/> and this <see cref="T:Duality.BoundingFrustum"/> or null if no intersection happens.
            </summary>
            <param name="ray">A <see cref="T:Duality.Ray"/> for intersection test.</param>
            <returns>Distance at which ray intersects with this <see cref="T:Duality.BoundingFrustum"/> or null if no intersection happens.</returns>
        </member>
        <member name="M:Duality.BoundingFrustum.Intersects(Duality.Ray@,System.Nullable{System.Double}@)">
            <summary>
            Gets the distance of intersection of <see cref="T:Duality.Ray"/> and this <see cref="T:Duality.BoundingFrustum"/> or null if no intersection happens.
            </summary>
            <param name="ray">A <see cref="T:Duality.Ray"/> for intersection test.</param>
            <param name="result">Distance at which ray intersects with this <see cref="T:Duality.BoundingFrustum"/> or null if no intersection happens as an output parameter.</param>
        </member>
        <member name="M:Duality.BoundingFrustum.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this <see cref="T:Duality.BoundingFrustum"/> in the format:
            {Near:[nearPlane] Far:[farPlane] Left:[leftPlane] Right:[rightPlane] Top:[topPlane] Bottom:[bottomPlane]}
            </summary>
            <returns><see cref="T:System.String"/> representation of this <see cref="T:Duality.BoundingFrustum"/>.</returns>
        </member>
        <member name="T:Duality.MathF">
            <summary>
            Provides math utility methods and double versions of <see cref="T:System.Math"/> to fit
            Duality <see cref="T:System.Double"/> arithmetics. 
            </summary>
        </member>
        <member name="F:Duality.MathF.E">
            <summary>
            Euler's number, base of the natural logarithm. Approximately 2.7182818284.
            </summary>
        </member>
        <member name="F:Duality.MathF.Pi">
            <summary>
            Mmmhh... pie!
            </summary>
        </member>
        <member name="F:Duality.MathF.PiOver2">
            <summary>
            Equals <see cref="F:Duality.MathF.Pi"/> / 2.
            </summary>
        </member>
        <member name="F:Duality.MathF.PiOver3">
            <summary>
            Equals <see cref="F:Duality.MathF.Pi"/> / 3.
            </summary>
        </member>
        <member name="F:Duality.MathF.PiOver4">
            <summary>
            Equals <see cref="F:Duality.MathF.Pi"/> / 4.
            </summary>
        </member>
        <member name="F:Duality.MathF.PiOver6">
            <summary>
            Equals <see cref="F:Duality.MathF.Pi"/> / 6.
            </summary>
        </member>
        <member name="F:Duality.MathF.TwoPi">
            <summary>
            Equals 2 * <see cref="F:Duality.MathF.Pi"/>.
            </summary>
        </member>
        <member name="F:Duality.MathF.Deg2Rad">
            <summary>
            Another way to write RadAngle1
            </summary>
        </member>
        <member name="F:Duality.MathF.Rad2Deg">
            <summary>
            Rad to Deg
            </summary>
        </member>
        <member name="F:Duality.MathF.RadAngle1">
            <summary>
            A one degree angle in radians.
            </summary>
        </member>
        <member name="F:Duality.MathF.RadAngle30">
            <summary>
            A 30 degree angle in radians. Equals <see cref="F:Duality.MathF.PiOver6"/>.
            </summary>
        </member>
        <member name="F:Duality.MathF.RadAngle45">
            <summary>
            A 45 degree angle in radians. Equals <see cref="F:Duality.MathF.PiOver4"/>.
            </summary>
        </member>
        <member name="F:Duality.MathF.RadAngle90">
            <summary>
            A 90 degree angle in radians. Equals <see cref="F:Duality.MathF.PiOver2"/>.
            </summary>
        </member>
        <member name="F:Duality.MathF.RadAngle180">
            <summary>
            A 180 degree angle in radians. Equals <see cref="F:Duality.MathF.Pi"/>.
            </summary>
        </member>
        <member name="F:Duality.MathF.RadAngle270">
            <summary>(PI * 2) / 360
            A 270 degree angle in radians. Equals <see cref="F:Duality.MathF.Pi"/>.
            </summary>
        </member>
        <member name="F:Duality.MathF.RadAngle360">
            <summary>
            A 360 degree angle in radians. Equals <see cref="F:Duality.MathF.TwoPi"/>.
            </summary>
        </member>
        <member name="P:Duality.MathF.Rnd">
            <summary>
            [GET / SET] Global random number generator. Is never null.
            </summary>
        </member>
        <member name="M:Duality.MathF.SafeToDecimal(System.Double)">
            <summary>
            Converts the specified double value to decimal and clamps it if necessary.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Duality.MathF.Abs(System.Double)">
            <summary>
            Returns the absolute value of a <see cref="T:System.Double"/>.
            </summary>
            <param name="v">A number.</param>
            <returns>The absolute value of the number.</returns>
        </member>
        <member name="M:Duality.MathF.Abs(System.Int32)">
            <summary>
            Returns the absolute value of a <see cref="T:System.Int32"/>.
            </summary>
            <param name="v">A number.</param>
            <returns>The absolute value of the number.</returns>
        </member>
        <member name="M:Duality.MathF.Ceiling(System.Double)">
            <summary>
            Returns the lowest whole-number bigger than the specified one. (Rounds up)
            </summary>
            <param name="v">A number.</param>
            <returns>The rounded number.</returns>
            <seealso cref="M:Duality.MathF.Floor(System.Double)"/>
        </member>
        <member name="M:Duality.MathF.Floor(System.Double)">
            <summary>
            Returns the highest whole-number smaller than the specified one. (Rounds down)
            </summary>
            <param name="v">A number.</param>
            <returns>The rounded number.</returns>
            <seealso cref="M:Duality.MathF.Ceiling(System.Double)"/>
        </member>
        <member name="M:Duality.MathF.FloorToInt(System.Double)">
            <summary>
            Returns the highest whole-number smaller than the specified one. (Rounds down)
            </summary>
            <param name="v">A number.</param>
            <returns>The rounded number as an int.</returns>
            <seealso cref="M:Duality.MathF.Ceiling(System.Double)"/>
        </member>
        <member name="M:Duality.MathF.Round(System.Double)">
            <summary>
            Rounds the specified value.
            </summary>
            <param name="v">A number.</param>
            <returns>The rounded number.</returns>
        </member>
        <member name="M:Duality.MathF.Round(System.Double,System.Int32)">
            <summary>
            Rounds the specified value to a certain number of fraction digits.
            </summary>
            <param name="v">A number.</param>
            <param name="digits">The number of fraction digits to round to.</param>
            <returns>The rounded number.</returns>
        </member>
        <member name="M:Duality.MathF.Round(System.Double,System.MidpointRounding)">
            <summary>
            Rounds the specified value.
            </summary>
            <param name="v">A number.</param>
            <param name="mode">Specifies what happens if the value is exactly inbetween two numbers.</param>
            <returns>The rounded number.</returns>
        </member>
        <member name="M:Duality.MathF.Round(System.Double,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds the specified value to a certain number of fraction digits.
            </summary>
            <param name="v">A number.</param>
            <param name="digits">The number of fraction digits to round to.</param>
            <param name="mode">Specifies what happens if the value is exactly inbetween two numbers.</param>
            <returns>The rounded number.</returns>
        </member>
        <member name="M:Duality.MathF.RoundToInt(System.Double)">
            <summary>
            Rounds the specified value to an integer value.
            </summary>
            <param name="v">A number.</param>
            <returns>The rounded number as <see cref="T:System.Int32"/>.</returns>
            <seealso cref="M:Duality.MathF.Round(System.Double)"/>
        </member>
        <member name="M:Duality.MathF.RoundToInt(System.Double,System.MidpointRounding)">
            <summary>
            Rounds the specified value to an integer value.
            </summary>
            <param name="v">A number.</param>
            <param name="mode">Specifies what happens if the value is exactly inbetween two numbers.</param>
            <returns>The rounded number as <see cref="T:System.Int32"/>.</returns>
            <seealso cref="M:Duality.MathF.Round(System.Double,System.MidpointRounding)"/>
        </member>
        <member name="M:Duality.MathF.Sign(System.Double)">
            <summary>
            Returns the sign of a value.
            </summary>
            <param name="v">A number.</param>
            <returns>-1 if negative, 1 if positive and 0 if zero.</returns>
        </member>
        <member name="M:Duality.MathF.Sign(System.Int32)">
            <summary>
            Returns the sign of a value.
            </summary>
            <param name="v">A number.</param>
            <returns>-1 if negative, 1 if positive and 0 if zero.</returns>
        </member>
        <member name="M:Duality.MathF.Sqrt(System.Double)">
            <summary>
            Returns a numbers square root.
            </summary>
            <param name="v">A number.</param>
            <returns>The numbers square root.</returns>
        </member>
        <member name="M:Duality.MathF.Factorial(System.Int32)">
            <summary>
            Returns the factorial of an integer value.
            </summary>
            <param name="n">A number.</param>
            <returns>The factorial of the number.</returns>
        </member>
        <member name="M:Duality.MathF.Min(System.Double,System.Double)">
            <summary>
            Returns the lower of two values.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>The lowest value.</returns>
        </member>
        <member name="M:Duality.MathF.Min(System.Double,System.Double,System.Double)">
            <summary>
            Returns the lowest of three values.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v3"></param>
            <returns>The lowest value.</returns>
        </member>
        <member name="M:Duality.MathF.Min(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the lowest of four values.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v3"></param>
            <param name="v4"></param>
            <returns>The lowest value.</returns>
        </member>
        <member name="M:Duality.MathF.Min(System.Double[])">
            <summary>
            Returns the lowest of any number of values.
            </summary>
            <param name="v"></param>
            <returns>The lowest value.</returns>
        </member>
        <member name="M:Duality.MathF.Min(System.Int32,System.Int32)">
            <summary>
            Returns the lower of two values.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>The lowest value.</returns>
        </member>
        <member name="M:Duality.MathF.Min(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the lowest of three values.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v3"></param>
            <returns>The lowest value.</returns>
        </member>
        <member name="M:Duality.MathF.Min(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the lowest of four values.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v3"></param>
            <param name="v4"></param>
            <returns>The lowest value.</returns>
        </member>
        <member name="M:Duality.MathF.Min(System.Int32[])">
            <summary>
            Returns the lowest of any number of values.
            </summary>
            <param name="v"></param>
            <returns>The lowest value.</returns>
        </member>
        <member name="M:Duality.MathF.Max(System.Double,System.Double)">
            <summary>
            Returns the higher of two values.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>The highest value.</returns>
        </member>
        <member name="M:Duality.MathF.Max(System.Double,System.Double,System.Double)">
            <summary>
            Returns the highest of three values.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v3"></param>
            <returns>The highest value.</returns>
        </member>
        <member name="M:Duality.MathF.Max(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the highest of four values.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v3"></param>
            <param name="v4"></param>
            <returns>The highest value.</returns>
        </member>
        <member name="M:Duality.MathF.Max(System.Double[])">
            <summary>
            Returns the highest of any number of values.
            </summary>
            <param name="v"></param>
            <returns>The highest value.</returns>
        </member>
        <member name="M:Duality.MathF.Max(System.Int32,System.Int32)">
            <summary>
            Returns the higher of two values.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>The highest value.</returns>
        </member>
        <member name="M:Duality.MathF.Max(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the highest of three values.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v3"></param>
            <returns>The highest value.</returns>
        </member>
        <member name="M:Duality.MathF.Max(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the highest of four values.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v3"></param>
            <param name="v4"></param>
            <returns>The highest value.</returns>
        </member>
        <member name="M:Duality.MathF.Max(System.Int32[])">
            <summary>
            Returns the highest of any number of values.
            </summary>
            <param name="v"></param>
            <returns>The highest value.</returns>
        </member>
        <member name="M:Duality.MathF.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamps a value between minimum and maximum.
            </summary>
            <param name="v">The value to clamp.</param>
            <param name="min">The minimum value that can't be deceeded.</param>
            <param name="max">The maximum value that can't be exceeded.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Duality.MathF.Clamp01(System.Double)">
            <summary>
            Clamps a value between 0 and 1 inclusive.
            </summary>
            <param name="v">The value to clamp.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Duality.MathF.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps a value between minimum and maximum.
            </summary>
            <param name="v">The value to clamp.</param>
            <param name="min">The minimum value that can't be deceeded.</param>
            <param name="max">The maximum value that can't be exceeded.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Duality.MathF.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Performs linear interpolation between two values.
            </summary>
            <param name="a">The first anchor value.</param>
            <param name="b">The second anchor value.</param>
            <param name="ratio">Ratio between first and second anchor. Zero will result in anchor a, one will result in anchor b.</param>
        </member>
        <member name="M:Duality.MathF.InvLerp(System.Double,System.Double,System.Double)">
            <summary>
            Performs inverse linear interpolation between two anchor values.
            </summary>
            <param name="min">The first anchor value.</param>
            <param name="max">The second anchor value.</param>
            <param name="value">The value between both anchor values.</param>
        </member>
        <member name="M:Duality.MathF.InvLerp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs inverse linear interpolation between two anchor values.
            </summary>
            <param name="min">The first anchor value.</param>
            <param name="max">The second anchor value.</param>
            <param name="value">The value between both anchor values.</param>
        </member>
        <member name="M:Duality.MathF.SmoothStep(System.Double)">
            <summary>
            Performs a SmoothStep interpolation between 0 and 1.
            </summary>
            <param name="value">The input value.</param>
        </member>
        <member name="M:Duality.MathF.SmoothStep(System.Double,System.Double,System.Double)">
            <summary>
            Performs a SmoothStep interpolation between two anchor values.
            </summary>
            <param name="min">The lower bound anchor value</param>
            <param name="max">The upper bound anchor value</param>
            <param name="value">The input value.</param>
        </member>
        <member name="M:Duality.MathF.Exp(System.Double)">
            <summary>
            Returns the specified power of <see cref="F:Duality.MathF.E"/>.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Duality.MathF.Log(System.Double)">
            <summary>
            Returns the natural logarithm of a value.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Duality.MathF.Pow(System.Double,System.Double)">
            <summary>
            Returns the specified power of a value.
            </summary>
            <param name="v">The base value.</param>
            <param name="e">Specifies the power to return.</param>
        </member>
        <member name="M:Duality.MathF.Log(System.Double,System.Double)">
            <summary>
            Returns the logarithm of a value.
            </summary>
            <param name="v">The value whichs logarithm is to be calculated.</param>
            <param name="newBase">The base of the logarithm.</param>
        </member>
        <member name="M:Duality.MathF.Sin(System.Double)">
            <summary>
            Returns the sine value of the specified (radian) angle.
            </summary>
            <param name="angle">A radian angle.</param>
        </member>
        <member name="M:Duality.MathF.Cos(System.Double)">
            <summary>
            Returns the cosine value of the specified (radian) angle.
            </summary>
            <param name="angle">A radian angle.</param>
        </member>
        <member name="M:Duality.MathF.Tan(System.Double)">
            <summary>
            Returns the tangent value of the specified (radian) angle.
            </summary>
            <param name="angle">A radian angle.</param>
        </member>
        <member name="M:Duality.MathF.Asin(System.Double)">
            <summary>
            Returns the inverse sine value of the specified (radian) angle.
            </summary>
            <param name="sin">A radian angle.</param>
        </member>
        <member name="M:Duality.MathF.Acos(System.Double)">
            <summary>
            Returns the inverse cosine value of the specified (radian) angle.
            </summary>
            <param name="cos">A radian angle.</param>
        </member>
        <member name="M:Duality.MathF.Atan(System.Double)">
            <summary>
            Returns the inverse tangent value of the specified (radian) angle.
            </summary>
            <param name="tan">A radian angle.</param>
        </member>
        <member name="M:Duality.MathF.Atan2(System.Double,System.Double)">
            <summary>
            Returns the (radian) angle whose tangent is the quotient of two specified numbers.
            </summary>
            <param name="y">The y coordinate of a point. </param>
            <param name="x">The x coordinate of a point. </param>
        </member>
        <member name="M:Duality.MathF.DegToRad(System.Double)">
            <summary>
            Converts degrees  to radians.
            </summary>
            <param name="deg"></param>
        </member>
        <member name="M:Duality.MathF.DegToRad(Duality.Vector3)">
            <summary>
            Converts degrees  to radians.
            </summary>
            <param name="deg"></param>
        </member>
        <member name="M:Duality.MathF.RadToDeg(System.Double)">
            <summary>
            Converts radians to degrees.
            </summary>
            <param name="rad"></param>
        </member>
        <member name="M:Duality.MathF.RadToDeg(Duality.Vector3)">
            <summary>
            Converts radians to degrees.
            </summary>
            <param name="rad"></param>
        </member>
        <member name="M:Duality.MathF.NormalizeVar(System.Double,System.Double,System.Double)">
            <summary>
            Normalizes a value to the given circular area.
            </summary>
            <returns>The normalized value between min (inclusive) and max (exclusive).</returns>
            <example>
            <c>NormalizeVar(480, 0, 360)</c> will return 120.
            </example>
        </member>
        <member name="M:Duality.MathF.NormalizeVar(System.Int32,System.Int32,System.Int32)">
            <summary>
            Normalizes a value to the given circular area.
            </summary>
            <returns>The normalized value between min (inclusive) and max (exclusive).</returns>
            <example>
            <c>NormalizeVar(480, 0, 360)</c> will return 120.
            </example>
        </member>
        <member name="M:Duality.MathF.NormalizeAngle(System.Double)">
            <summary>
            Normalizes a radian angle to values between zero and <see cref="F:Duality.MathF.TwoPi"/>.
            </summary>
            <returns>The normalized value between zero and <see cref="F:Duality.MathF.TwoPi"/>.</returns>
            <example>
            <c>NormalizeAngle(<see cref="F:Duality.MathF.TwoPi"/> + <see cref="F:Duality.MathF.Pi"/>)</c> will return <see cref="F:Duality.MathF.Pi"/>.
            </example>
        </member>
        <member name="M:Duality.MathF.Distance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the distance between two points in 2d space.
            </summary>
            <param name="x1">The x-Coordinate of the first point.</param>
            <param name="y1">The y-Coordinate of the first point.</param>
            <param name="x2">The x-Coordinate of the second point.</param>
            <param name="y2">The y-Coordinate of the second point.</param>
            <returns>The distance between both points.</returns>
        </member>
        <member name="M:Duality.MathF.Distance(System.Double,System.Double)">
            <summary>
            Returns the distance between a point and [0,0] in 2d space.
            </summary>
            <param name="x">The x-Coordinate of the point.</param>
            <param name="y">The y-Coordinate of the point.</param>
            <returns>The distance between the point and [0,0].</returns>
        </member>
        <member name="M:Duality.MathF.DistanceQuad(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the squared distance between two points in 2d space.
            </summary>
            <param name="x1">The x-Coordinate of the first point.</param>
            <param name="y1">The y-Coordinate of the first point.</param>
            <param name="x2">The x-Coordinate of the second point.</param>
            <param name="y2">The y-Coordinate of the second point.</param>
            <returns>The distance between both points.</returns>
            <remarks>
            This method is faster than <see cref="M:Duality.MathF.Distance(System.Double,System.Double,System.Double,System.Double)"/>. 
            If sufficient, such as for distance comparison, consider using this method instead.
            </remarks>
        </member>
        <member name="M:Duality.MathF.DistanceQuad(System.Double,System.Double)">
            <summary>
            Returns the squared distance between a point and [0,0] in 2d space.
            </summary>
            <param name="x">The x-Coordinate of the point.</param>
            <param name="y">The y-Coordinate of the point.</param>
            <returns>The distance between the point and [0,0].</returns>
            <remarks>
            This method is faster than <see cref="M:Duality.MathF.Distance(System.Double,System.Double)"/>. 
            If sufficient, such as for distance comparison, consider using this method instead.
            </remarks>
        </member>
        <member name="M:Duality.MathF.Angle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the angle between two points in 2D space.
            </summary>
            <param name="x1">The x-Coordinate of the first point.</param>
            <param name="y1">The y-Coordinate of the first point.</param>
            <param name="x2">The x-Coordinate of the second point.</param>
            <param name="y2">The y-Coordinate of the second point.</param>
            <returns>The angle between [x1,y1] and [x2,y2] in radians.</returns>
        </member>
        <member name="M:Duality.MathF.Angle(System.Double,System.Double)">
            <summary>
            Calculates the angle from [0,0] to a specified point in 2D space.
            </summary>
            <param name="x">The x-Coordinate of the point.</param>
            <param name="y">The y-Coordinate of the point.</param>
            <returns>The angle between [0,0] and [x,y] in radians.</returns>
        </member>
        <member name="M:Duality.MathF.TurnDir(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Assuming a circular value area, this method returns the direction to "turn" value 1 to
            when it comes to take the shortest way to value 2.
            </summary>
            <param name="val1">The first (source) value.</param>
            <param name="val2">The second (destination) value.</param>
            <param name="minVal">Minimum value.</param>
            <param name="maxVal">Maximum value.</param>
            <returns>-1 for "left" / lower, 1 for "right" / higher and 0 for "stay" / equal</returns>
        </member>
        <member name="M:Duality.MathF.TurnDir(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Assuming a circular value area, this method returns the direction to "turn" value 1 to
            when it comes to take the shortest way to value 2.
            </summary>
            <param name="val1">The first (source) value.</param>
            <param name="val2">The second (destination) value.</param>
            <param name="minVal">Minimum value.</param>
            <param name="maxVal">Maximum value.</param>
            <returns>-1 for "left" / lower, 1 for "right" / higher and 0 for "stay" / equal</returns>
        </member>
        <member name="M:Duality.MathF.TurnDir(System.Double,System.Double)">
            <summary>
            Assuming an angular (radian) value area, this method returns the direction to "turn" value 1 to
            when it comes to take the shortest way to value 2.
            </summary>
            <param name="val1">The first (source) value.</param>
            <param name="val2">The second (destination) value.</param>
            <returns>-1 for "left" / lower, 1 for "right" / higher and 0 for "stay" / equal</returns>
        </member>
        <member name="M:Duality.MathF.CircularDist(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the distance between two values assuming a circular value area.
            </summary>
            <param name="v1">Value 1</param>
            <param name="v2">Value 2</param>
            <param name="vMin">Value area minimum</param>
            <param name="vMax">Value area maximum</param>
            <returns>Value distance</returns>
        </member>
        <member name="M:Duality.MathF.CircularDist(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the distance between two values assuming a circular value area.
            </summary>
            <param name="v1">Value 1</param>
            <param name="v2">Value 2</param>
            <param name="vMin">Value area minimum</param>
            <param name="vMax">Value area maximum</param>
            <returns>Value distance</returns>
        </member>
        <member name="M:Duality.MathF.CircularDist(System.Double,System.Double)">
            <summary>
            Calculates the distance between two angular (radian) values.
            </summary>
            <param name="v1">The first (radian) angle.</param>
            <param name="v2">The second (radian) angle.</param>
            <returns>The angular distance in radians between both angles.</returns>
        </member>
        <member name="M:Duality.MathF.LinesCross(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Boolean)">
            <summary>
            Checks, if two line segments (or infinite lines) cross and determines their mutual point.
            </summary>
            <param name="startX1">x-Coordinate of the first lines start.</param>
            <param name="startY1">y-Coordinate of the first lines start.</param>
            <param name="endX1">x-Coordinate of the first lines end.</param>
            <param name="endY1">y-Coordinate of the first lines end.</param>
            <param name="startX2">x-Coordinate of the second lines start.</param>
            <param name="startY2">y-Coordinate of the second lines start.</param>
            <param name="endX2">x-Coordinate of the second lines end.</param>
            <param name="endY2">y-Coordinate of the second lines end.</param>
            <param name="infinite">Whether the lines are considered infinite.</param>
            <param name="crossX">x-Coordiante at which both lines cross.</param>
            <param name="crossY">y-Coordinate at which both lines cross.</param>
            <returns>True, if the lines cross, false if not.</returns>
        </member>
        <member name="M:Duality.MathF.LinesCross(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Checks, if two line segments (or infinite lines) cross and determines their mutual point.
            </summary>
            <param name="startX1">x-Coordinate of the first lines start.</param>
            <param name="startY1">y-Coordinate of the first lines start.</param>
            <param name="endX1">x-Coordinate of the first lines end.</param>
            <param name="endY1">y-Coordinate of the first lines end.</param>
            <param name="startX2">x-Coordinate of the second lines start.</param>
            <param name="startY2">y-Coordinate of the second lines start.</param>
            <param name="endX2">x-Coordinate of the second lines end.</param>
            <param name="endY2">y-Coordinate of the second lines end.</param>
            <param name="infinite">Whether the lines are considered infinite.</param>
            <returns>True, if the lines cross, false if not.</returns>
        </member>
        <member name="M:Duality.MathF.PointLineNearestPoint(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Calculates the point on a line segment (or infinite line) that has the lowest possible
            distance to a point.
            </summary>
            <param name="pX">x-Coordinate of the point.</param>
            <param name="pY">y-Coordinate of the point.</param>
            <param name="lX1">x-Coordinate of the lines start.</param>
            <param name="lY1">y-Coordinate of the lines start.</param>
            <param name="lX2">x-Coordinate of the lines end.</param>
            <param name="lY2">y-Coordinate of the lines end.</param>
            <param name="infinite">Whether the line is considered infinite.</param>
            <returns>A point located on the specified line that is as close as possible to the specified point.</returns>
        </member>
        <member name="M:Duality.MathF.PointLineDistance(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Calculates the distance between a point and a line segment (or infinite line).
            </summary>
            <param name="pX">x-Coordinate of the point.</param>
            <param name="pY">y-Coordinate of the point.</param>
            <param name="lX1">x-Coordinate of the lines start.</param>
            <param name="lY1">y-Coordinate of the lines start.</param>
            <param name="lX2">x-Coordinate of the lines end.</param>
            <param name="lY2">y-Coordinate of the lines end.</param>
            <param name="infinite">Whether the line is considered infinite.</param>
            <returns>The distance between point and line.</returns>
        </member>
        <member name="M:Duality.MathF.IsPolygonConvex(Duality.Vector2[])">
            <summary>
            Returns whether or not the specified polygon is convex.
            </summary>
            <param name="vertices"></param>
        </member>
        <member name="M:Duality.MathF.NextPowerOfTwo(System.Int32)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:Duality.MathF.Swap``1(``0@,``0@)">
            <summary>
            Swaps the values of two variables.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
        </member>
        <member name="M:Duality.MathF.CombineHashCode(System.Int32@,System.Int32)">
            <summary>
            Combines two hash codes.
            </summary>
            <param name="baseHash"></param>
            <param name="otherHash"></param>
        </member>
        <member name="M:Duality.MathF.CombineHashCode(System.Int32[])">
            <summary>
            Combines any number of hash codes.
            </summary>
            <param name="hashes"></param>
        </member>
        <member name="M:Duality.MathF.CheckValidValue(System.Double)">
            <summary>
            Throws an ArgumentOutOfRangeException, if the specified value is NaN or Infinity.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Duality.MathF.CheckValidValue(Duality.Vector2)">
            <summary>
            Throws an ArgumentOutOfRangeException, if the specified value is NaN or Infinity.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Duality.MathF.CheckValidValue(Duality.Vector3)">
            <summary>
            Throws an ArgumentOutOfRangeException, if the specified value is NaN or Infinity.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Duality.MathF.CheckValidValue(Duality.Quaternion)">
            <summary>
            Throws an ArgumentOutOfRangeException, if the specified value is NaN or Infinity.
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Duality.Matrix3">
            <summary>
            Represents a 3x3 matrix containing 3D rotation and scale.
            </summary>
        </member>
        <member name="F:Duality.Matrix3.Identity">
            <summary>
            The identity matrix.
            </summary>
        </member>
        <member name="F:Duality.Matrix3.Zero">
            <summary>
            The zero matrix.
            </summary>
        </member>
        <member name="F:Duality.Matrix3.Row0">
            <summary>
            First row of the matrix.
            </summary>
        </member>
        <member name="F:Duality.Matrix3.Row1">
            <summary>
            Second row of the matrix.
            </summary>
        </member>
        <member name="F:Duality.Matrix3.Row2">
            <summary>
            Third row of the matrix.
            </summary>
        </member>
        <member name="P:Duality.Matrix3.Column0">
            <summary>
            Gets the first column of this matrix.
            </summary>
        </member>
        <member name="P:Duality.Matrix3.Column1">
            <summary>
            Gets the second column of this matrix.
            </summary>
        </member>
        <member name="P:Duality.Matrix3.Column2">
            <summary>
            Gets the third column of this matrix.
            </summary>
        </member>
        <member name="P:Duality.Matrix3.M11">
            <summary>
            Gets or sets the value at row 1, column 1 of this instance.
            </summary>
        </member>
        <member name="P:Duality.Matrix3.M12">
            <summary>
            Gets or sets the value at row 1, column 2 of this instance.
            </summary>
        </member>
        <member name="P:Duality.Matrix3.M13">
            <summary>
            Gets or sets the value at row 1, column 3 of this instance.
            </summary>
        </member>
        <member name="P:Duality.Matrix3.M21">
            <summary>
            Gets or sets the value at row 2, column 1 of this instance.
            </summary>
        </member>
        <member name="P:Duality.Matrix3.M22">
            <summary>
            Gets or sets the value at row 2, column 2 of this instance.
            </summary>
        </member>
        <member name="P:Duality.Matrix3.M23">
            <summary>
            Gets or sets the value at row 2, column 3 of this instance.
            </summary>
        </member>
        <member name="P:Duality.Matrix3.M31">
            <summary>
            Gets or sets the value at row 3, column 1 of this instance.
            </summary>
        </member>
        <member name="P:Duality.Matrix3.M32">
            <summary>
            Gets or sets the value at row 3, column 2 of this instance.
            </summary>
        </member>
        <member name="P:Duality.Matrix3.M33">
            <summary>
            Gets or sets the value at row 3, column 3 of this instance.
            </summary>
        </member>
        <member name="P:Duality.Matrix3.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the value at a specified row and column.
            </summary>
        </member>
        <member name="P:Duality.Matrix3.Determinant">
            <summary>
            Gets the determinant of this matrix.
            </summary>
        </member>
        <member name="P:Duality.Matrix3.Diagonal">
            <summary>
            Gets or sets the values along the main diagonal of the matrix.
            </summary>
        </member>
        <member name="P:Duality.Matrix3.Trace">
            <summary>
            Gets the trace of the matrix, the sum of the values along the diagonal.
            </summary>
        </member>
        <member name="M:Duality.Matrix3.#ctor(Duality.Vector3,Duality.Vector3,Duality.Vector3)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="row0">Top row of the matrix</param>
            <param name="row1">Second row of the matrix</param>
            <param name="row2">Bottom row of the matrix</param>
        </member>
        <member name="M:Duality.Matrix3.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="m00">First item of the first row of the matrix.</param>
            <param name="m01">Second item of the first row of the matrix.</param>
            <param name="m02">Third item of the first row of the matrix.</param>
            <param name="m10">First item of the second row of the matrix.</param>
            <param name="m11">Second item of the second row of the matrix.</param>
            <param name="m12">Third item of the second row of the matrix.</param>
            <param name="m20">First item of the third row of the matrix.</param>
            <param name="m21">Second item of the third row of the matrix.</param>
            <param name="m22">Third item of the third row of the matrix.</param>
        </member>
        <member name="M:Duality.Matrix3.#ctor(Duality.Matrix4)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="matrix">A Matrix4 to take the upper-left 3x3 from.</param>
        </member>
        <member name="M:Duality.Matrix3.Invert">
            <summary>
            Converts this instance into its inverse.
            </summary>
        </member>
        <member name="M:Duality.Matrix3.Transpose">
            <summary>
            Converts this instance into its transpose.
            </summary>
        </member>
        <member name="M:Duality.Matrix3.Normalize">
            <summary>
            Divides each element in the Matrix by the <see cref="P:Duality.Matrix3.Determinant"/>.
            </summary>
        </member>
        <member name="M:Duality.Matrix3.Normalized">
            <summary>
            Returns a normalised copy of this instance.
            </summary>
        </member>
        <member name="M:Duality.Matrix3.Inverted">
            <summary>
            Returns an inverted copy of this instance.
            </summary>
        </member>
        <member name="M:Duality.Matrix3.ClearScale">
            <summary>
            Returns a copy of this Matrix3 without scale.
            </summary>
        </member>
        <member name="M:Duality.Matrix3.ClearRotation">
            <summary>
            Returns a copy of this Matrix3 without rotation.
            </summary>
        </member>
        <member name="M:Duality.Matrix3.ExtractScale">
            <summary>
            Returns the scale component of this instance.
            </summary>
        </member>
        <member name="M:Duality.Matrix3.ExtractRotation(System.Boolean)">
            <summary>
            Returns the rotation component of this instance. Quite slow.
            </summary>
            <param name="row_normalise">Whether the method should row-normalise (i.e. remove scale from) the Matrix. Pass false if you know it's already normalised.</param>
        </member>
        <member name="M:Duality.Matrix3.CreateFromAxisAngle(Duality.Vector3,System.Double,Duality.Matrix3@)">
            <summary>
            Build a rotation matrix from the specified axis/angle rotation.
            </summary>
            <param name="axis">The axis to rotate about.</param>
            <param name="angle">Angle in radians to rotate counter-clockwise (looking in the direction of the given axis).</param>
            <param name="result">A matrix instance.</param>
        </member>
        <member name="M:Duality.Matrix3.CreateFromAxisAngle(Duality.Vector3,System.Double)">
            <summary>
            Build a rotation matrix from the specified axis/angle rotation.
            </summary>
            <param name="axis">The axis to rotate about.</param>
            <param name="angle">Angle in radians to rotate counter-clockwise (looking in the direction of the given axis).</param>
            <returns>A matrix instance.</returns>
        </member>
        <member name="M:Duality.Matrix3.CreateFromQuaternion(Duality.Quaternion@,Duality.Matrix3@)">
            <summary>
            Build a rotation matrix from the specified quaternion.
            </summary>
            <param name="q">Quaternion to translate.</param>
            <param name="result">Matrix result.</param>
        </member>
        <member name="M:Duality.Matrix3.CreateFromQuaternion(Duality.Quaternion)">
            <summary>
            Build a rotation matrix from the specified quaternion.
            </summary>
            <param name="q">Quaternion to translate.</param>
            <returns>A matrix instance.</returns>
        </member>
        <member name="M:Duality.Matrix3.CreateRotationX(System.Double,Duality.Matrix3@)">
            <summary>
            Builds a rotation matrix for a rotation around the x-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <param name="result">The resulting Matrix3 instance.</param>
        </member>
        <member name="M:Duality.Matrix3.CreateRotationX(System.Double)">
            <summary>
            Builds a rotation matrix for a rotation around the x-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix3 instance.</returns>
        </member>
        <member name="M:Duality.Matrix3.CreateRotationY(System.Double,Duality.Matrix3@)">
            <summary>
            Builds a rotation matrix for a rotation around the y-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <param name="result">The resulting Matrix3 instance.</param>
        </member>
        <member name="M:Duality.Matrix3.CreateRotationY(System.Double)">
            <summary>
            Builds a rotation matrix for a rotation around the y-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix3 instance.</returns>
        </member>
        <member name="M:Duality.Matrix3.CreateRotationZ(System.Double,Duality.Matrix3@)">
            <summary>
            Builds a rotation matrix for a rotation around the z-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <param name="result">The resulting Matrix3 instance.</param>
        </member>
        <member name="M:Duality.Matrix3.CreateRotationZ(System.Double)">
            <summary>
            Builds a rotation matrix for a rotation around the z-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix3 instance.</returns>
        </member>
        <member name="M:Duality.Matrix3.CreateScale(System.Double)">
            <summary>
            Creates a scale matrix.
            </summary>
            <param name="scale">Single scale factor for the x, y, and z axes.</param>
            <returns>A scale matrix.</returns>
        </member>
        <member name="M:Duality.Matrix3.CreateScale(Duality.Vector3)">
            <summary>
            Creates a scale matrix.
            </summary>
            <param name="scale">Scale factors for the x, y, and z axes.</param>
            <returns>A scale matrix.</returns>
        </member>
        <member name="M:Duality.Matrix3.CreateScale(System.Double,System.Double,System.Double)">
            <summary>
            Creates a scale matrix.
            </summary>
            <param name="x">Scale factor for the x axis.</param>
            <param name="y">Scale factor for the y axis.</param>
            <param name="z">Scale factor for the z axis.</param>
            <returns>A scale matrix.</returns>
        </member>
        <member name="M:Duality.Matrix3.CreateScale(System.Double,Duality.Matrix3@)">
            <summary>
            Creates a scale matrix.
            </summary>
            <param name="scale">Single scale factor for the x, y, and z axes.</param>
            <param name="result">A scale matrix.</param>
        </member>
        <member name="M:Duality.Matrix3.CreateScale(Duality.Vector3@,Duality.Matrix3@)">
            <summary>
            Creates a scale matrix.
            </summary>
            <param name="scale">Scale factors for the x, y, and z axes.</param>
            <param name="result">A scale matrix.</param>
        </member>
        <member name="M:Duality.Matrix3.CreateScale(System.Double,System.Double,System.Double,Duality.Matrix3@)">
            <summary>
            Creates a scale matrix.
            </summary>
            <param name="x">Scale factor for the x axis.</param>
            <param name="y">Scale factor for the y axis.</param>
            <param name="z">Scale factor for the z axis.</param>
            <param name="result">A scale matrix.</param>
        </member>
        <member name="M:Duality.Matrix3.Mult(Duality.Matrix3,Duality.Matrix3)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The left operand of the multiplication.</param>
            <param name="right">The right operand of the multiplication.</param>
            <returns>A new instance that is the result of the multiplication</returns>
        </member>
        <member name="M:Duality.Matrix3.Mult(Duality.Matrix3@,Duality.Matrix3@,Duality.Matrix3@)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The left operand of the multiplication.</param>
            <param name="right">The right operand of the multiplication.</param>
            <param name="result">A new instance that is the result of the multiplication</param>
        </member>
        <member name="M:Duality.Matrix3.Invert(Duality.Matrix3@,Duality.Matrix3@)">
            <summary>
            Calculate the inverse of the given matrix
            </summary>
            <param name="mat">The matrix to invert</param>
            <param name="result">The inverse of the given matrix if it has one, or the input if it is singular</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the Matrix3 is singular.</exception>
        </member>
        <member name="M:Duality.Matrix3.Invert(Duality.Matrix3)">
            <summary>
            Calculate the inverse of the given matrix
            </summary>
            <param name="mat">The matrix to invert</param>
            <returns>The inverse of the given matrix if it has one, or the input if it is singular</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the Matrix4 is singular.</exception>
        </member>
        <member name="M:Duality.Matrix3.Transpose(Duality.Matrix3)">
            <summary>
            Calculate the transpose of the given matrix
            </summary>
            <param name="mat">The matrix to transpose</param>
            <returns>The transpose of the given matrix</returns>
        </member>
        <member name="M:Duality.Matrix3.Transpose(Duality.Matrix3@,Duality.Matrix3@)">
            <summary>
            Calculate the transpose of the given matrix
            </summary>
            <param name="mat">The matrix to transpose</param>
            <param name="result">The result of the calculation</param>
        </member>
        <member name="M:Duality.Matrix3.op_Multiply(Duality.Matrix3,Duality.Matrix3)">
            <summary>
            Matrix multiplication
            </summary>
            <param name="left">left-hand operand</param>
            <param name="right">right-hand operand</param>
            <returns>A new Matrix3d which holds the result of the multiplication</returns>
        </member>
        <member name="M:Duality.Matrix3.op_Equality(Duality.Matrix3,Duality.Matrix3)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left equals right; false otherwise.</returns>
        </member>
        <member name="M:Duality.Matrix3.op_Inequality(Duality.Matrix3,Duality.Matrix3)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left does not equal right; false otherwise.</returns>
        </member>
        <member name="M:Duality.Matrix3.ToString">
            <summary>
            Returns a System.String that represents the current Matrix3d.
            </summary>
            <returns>The string representation of the matrix.</returns>
        </member>
        <member name="M:Duality.Matrix3.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:Duality.Matrix3.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:Duality.Matrix3.Equals(Duality.Matrix3)">
            <summary>
            Indicates whether the current matrix is equal to another matrix.
            </summary>
            <param name="other">A matrix to compare with this matrix.</param>
            <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="T:Duality.Matrix4">
            <summary>
            Represents a 4x4 matrix containing 3D rotation, scale, transform, and projection.
            </summary>
        </member>
        <member name="F:Duality.Matrix4.Identity">
            <summary>
            The identity matrix.
            </summary>
        </member>
        <member name="F:Duality.Matrix4.Zero">
            <summary>
            The zero matrix.
            </summary>
        </member>
        <member name="F:Duality.Matrix4.Row0">
            <summary>
            Top row of the matrix.
            </summary>
        </member>
        <member name="F:Duality.Matrix4.Row1">
            <summary>
            2nd row of the matrix.
            </summary>
        </member>
        <member name="F:Duality.Matrix4.Row2">
            <summary>
            3rd row of the matrix.
            </summary>
        </member>
        <member name="F:Duality.Matrix4.Row3">
            <summary>
            Bottom row of the matrix.
            </summary>
        </member>
        <member name="P:Duality.Matrix4.Column0">
            <summary>
            Gets the first column of this matrix.
            </summary>
        </member>
        <member name="P:Duality.Matrix4.Column1">
            <summary>
            Gets the second column of this matrix.
            </summary>
        </member>
        <member name="P:Duality.Matrix4.Column2">
            <summary>
            Gets the third column of this matrix.
            </summary>
        </member>
        <member name="P:Duality.Matrix4.Column3">
            <summary>
            Gets the fourth column of this matrix.
            </summary>
        </member>
        <member name="P:Duality.Matrix4.M11">
            <summary>
            Gets or sets the value at row 1, column 1 of this instance.
            </summary>
        </member>
        <member name="P:Duality.Matrix4.M12">
            <summary>
            Gets or sets the value at row 1, column 2 of this instance.
            </summary>
        </member>
        <member name="P:Duality.Matrix4.M13">
            <summary>
            Gets or sets the value at row 1, column 3 of this instance.
            </summary>
        </member>
        <member name="P:Duality.Matrix4.M14">
            <summary>
            Gets or sets the value at row 1, column 4 of this instance.
            </summary>
        </member>
        <member name="P:Duality.Matrix4.M21">
            <summary>
            Gets or sets the value at row 2, column 1 of this instance.
            </summary>
        </member>
        <member name="P:Duality.Matrix4.M22">
            <summary>
            Gets or sets the value at row 2, column 2 of this instance.
            </summary>
        </member>
        <member name="P:Duality.Matrix4.M23">
            <summary>
            Gets or sets the value at row 2, column 3 of this instance.
            </summary>
        </member>
        <member name="P:Duality.Matrix4.M24">
            <summary>
            Gets or sets the value at row 2, column 4 of this instance.
            </summary>
        </member>
        <member name="P:Duality.Matrix4.M31">
            <summary>
            Gets or sets the value at row 3, column 1 of this instance.
            </summary>
        </member>
        <member name="P:Duality.Matrix4.M32">
            <summary>
            Gets or sets the value at row 3, column 2 of this instance.
            </summary>
        </member>
        <member name="P:Duality.Matrix4.M33">
            <summary>
            Gets or sets the value at row 3, column 3 of this instance.
            </summary>
        </member>
        <member name="P:Duality.Matrix4.M34">
            <summary>
            Gets or sets the value at row 3, column 4 of this instance.
            </summary>
        </member>
        <member name="P:Duality.Matrix4.M41">
            <summary>
            Gets or sets the value at row 4, column 1 of this instance.
            </summary>
        </member>
        <member name="P:Duality.Matrix4.M42">
            <summary>
            Gets or sets the value at row 4, column 2 of this instance.
            </summary>
        </member>
        <member name="P:Duality.Matrix4.M43">
            <summary>
            Gets or sets the value at row 4, column 3 of this instance.
            </summary>
        </member>
        <member name="P:Duality.Matrix4.M44">
            <summary>
            Gets or sets the value at row 4, column 4 of this instance.
            </summary>
        </member>
        <member name="P:Duality.Matrix4.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the value at a specified row and column.
            </summary>
        </member>
        <member name="P:Duality.Matrix4.Determinant">
            <summary>
            Gets the determinant of this matrix.
            </summary>
        </member>
        <member name="P:Duality.Matrix4.Diagonal">
            <summary>
            Gets or sets the values along the main diagonal of the matrix.
            </summary>
        </member>
        <member name="P:Duality.Matrix4.Trace">
            <summary>
            Gets the trace of the matrix, the sum of the values along the diagonal.
            </summary>
        </member>
        <member name="M:Duality.Matrix4.#ctor(Duality.Vector4,Duality.Vector4,Duality.Vector4,Duality.Vector4)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="row0">Top row of the matrix.</param>
            <param name="row1">Second row of the matrix.</param>
            <param name="row2">Third row of the matrix.</param>
            <param name="row3">Bottom row of the matrix.</param>
        </member>
        <member name="M:Duality.Matrix4.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="m00">First item of the first row of the matrix.</param>
            <param name="m01">Second item of the first row of the matrix.</param>
            <param name="m02">Third item of the first row of the matrix.</param>
            <param name="m03">Fourth item of the first row of the matrix.</param>
            <param name="m10">First item of the second row of the matrix.</param>
            <param name="m11">Second item of the second row of the matrix.</param>
            <param name="m12">Third item of the second row of the matrix.</param>
            <param name="m13">Fourth item of the second row of the matrix.</param>
            <param name="m20">First item of the third row of the matrix.</param>
            <param name="m21">Second item of the third row of the matrix.</param>
            <param name="m22">Third item of the third row of the matrix.</param>
            <param name="m23">First item of the third row of the matrix.</param>
            <param name="m30">Fourth item of the fourth row of the matrix.</param>
            <param name="m31">Second item of the fourth row of the matrix.</param>
            <param name="m32">Third item of the fourth row of the matrix.</param>
            <param name="m33">Fourth item of the fourth row of the matrix.</param>
        </member>
        <member name="P:Duality.Matrix4.Backward">
            <summary>
            The backward vector formed from the third row M31, M32, M33 elements.
            </summary>
        </member>
        <member name="P:Duality.Matrix4.Down">
            <summary>
            The down vector formed from the second row -M21, -M22, -M23 elements.
            </summary>
        </member>
        <member name="P:Duality.Matrix4.Forward">
            <summary>
            The forward vector formed from the third row -M31, -M32, -M33 elements.
            </summary>
        </member>
        <member name="P:Duality.Matrix4.Left">
            <summary>
            The left vector formed from the first row -M11, -M12, -M13 elements.
            </summary>
        </member>
        <member name="P:Duality.Matrix4.Right">
            <summary>
            The right vector formed from the first row M11, M12, M13 elements.
            </summary>
        </member>
        <member name="P:Duality.Matrix4.Translation">
            <summary>
            Position stored in this matrix.
            </summary>
        </member>
        <member name="P:Duality.Matrix4.Up">
            <summary>
            The upper vector formed from the second row M21, M22, M23 elements.
            </summary>
        </member>
        <member name="M:Duality.Matrix4.Add(Duality.Matrix4,Duality.Matrix4)">
            <summary>
            Creates a new <see cref="T:Duality.Matrix4"/> which contains sum of two matrixes.
            </summary>
            <param name="matrix1">The first matrix to add.</param>
            <param name="matrix2">The second matrix to add.</param>
            <returns>The result of the matrix addition.</returns>
        </member>
        <member name="M:Duality.Matrix4.Add(Duality.Matrix4@,Duality.Matrix4@,Duality.Matrix4@)">
            <summary>
            Creates a new <see cref="T:Duality.Matrix4"/> which contains sum of two matrixes.
            </summary>
            <param name="matrix1">The first matrix to add.</param>
            <param name="matrix2">The second matrix to add.</param>
            <param name="result">The result of the matrix addition as an output parameter.</param>
        </member>
        <member name="M:Duality.Matrix4.CreateBillboard(Duality.Vector3,Duality.Vector3,Duality.Vector3,System.Nullable{Duality.Vector3})">
            <summary>
            Creates a new <see cref="T:Duality.Matrix4"/> for spherical billboarding that rotates around specified object position.
            </summary>
            <param name="objectPosition">Position of billboard object. It will rotate around that vector.</param>
            <param name="cameraPosition">The camera position.</param>
            <param name="cameraUpVector">The camera up vector.</param>
            <param name="cameraForwardVector">Optional camera forward vector.</param>
            <returns>The <see cref="T:Duality.Matrix4"/> for spherical billboarding.</returns>
        </member>
        <member name="M:Duality.Matrix4.CreateBillboard(Duality.Vector3@,Duality.Vector3@,Duality.Vector3@,System.Nullable{Duality.Vector3},Duality.Matrix4@)">
            <summary>
            Creates a new <see cref="T:Duality.Matrix4"/> for spherical billboarding that rotates around specified object position.
            </summary>
            <param name="objectPosition">Position of billboard object. It will rotate around that vector.</param>
            <param name="cameraPosition">The camera position.</param>
            <param name="cameraUpVector">The camera up vector.</param>
            <param name="cameraForwardVector">Optional camera forward vector.</param>
            <param name="result">The <see cref="T:Duality.Matrix4"/> for spherical billboarding as an output parameter.</param>
        </member>
        <member name="M:Duality.Matrix4.CreateConstrainedBillboard(Duality.Vector3,Duality.Vector3,Duality.Vector3,System.Nullable{Duality.Vector3},System.Nullable{Duality.Vector3})">
            <summary>
            Creates a new <see cref="T:Duality.Matrix4"/> for cylindrical billboarding that rotates around specified axis.
            </summary>
            <param name="objectPosition">Object position the billboard will rotate around.</param>
            <param name="cameraPosition">Camera position.</param>
            <param name="rotateAxis">Axis of billboard for rotation.</param>
            <param name="cameraForwardVector">Optional camera forward vector.</param>
            <param name="objectForwardVector">Optional object forward vector.</param>
            <returns>The <see cref="T:Duality.Matrix4"/> for cylindrical billboarding.</returns>
        </member>
        <member name="M:Duality.Matrix4.CreateConstrainedBillboard(Duality.Vector3@,Duality.Vector3@,Duality.Vector3@,System.Nullable{Duality.Vector3},System.Nullable{Duality.Vector3},Duality.Matrix4@)">
            <summary>
            Creates a new <see cref="T:Duality.Matrix4"/> for cylindrical billboarding that rotates around specified axis.
            </summary>
            <param name="objectPosition">Object position the billboard will rotate around.</param>
            <param name="cameraPosition">Camera position.</param>
            <param name="rotateAxis">Axis of billboard for rotation.</param>
            <param name="cameraForwardVector">Optional camera forward vector.</param>
            <param name="objectForwardVector">Optional object forward vector.</param>
            <param name="result">The <see cref="T:Duality.Matrix4"/> for cylindrical billboarding as an output parameter.</param>
        </member>
        <member name="M:Duality.Matrix4.CreateFromAxisAngle(Duality.Vector3,System.Double)">
            <summary>
            Creates a new <see cref="T:Duality.Matrix4"/> which contains the rotation moment around specified axis.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation in radians.</param>
            <returns>The rotation <see cref="T:Duality.Matrix4"/>.</returns>
        </member>
        <member name="M:Duality.Matrix4.CreateFromAxisAngle(Duality.Vector3@,System.Double,Duality.Matrix4@)">
            <summary>
            Creates a new <see cref="T:Duality.Matrix4"/> which contains the rotation moment around specified axis.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation in radians.</param>
            <param name="result">The rotation <see cref="T:Duality.Matrix4"/> as an output parameter.</param>
        </member>
        <member name="M:Duality.Matrix4.CreateFromQuaternion(Duality.Quaternion)">
            <summary>
            Creates a new rotation <see cref="T:Duality.Matrix4"/> from a <see cref="T:Duality.Quaternion"/>.
            </summary>
            <param name="quaternion"><see cref="T:Duality.Quaternion"/> of rotation moment.</param>
            <returns>The rotation <see cref="T:Duality.Matrix4"/>.</returns>
        </member>
        <member name="M:Duality.Matrix4.CreateFromQuaternion(Duality.Quaternion@,Duality.Matrix4@)">
            <summary>
            Creates a new rotation <see cref="T:Duality.Matrix4"/> from a <see cref="T:Duality.Quaternion"/>.
            </summary>
            <param name="quaternion"><see cref="T:Duality.Quaternion"/> of rotation moment.</param>
            <param name="result">The rotation <see cref="T:Duality.Matrix4"/> as an output parameter.</param>
        </member>
        <member name="M:Duality.Matrix4.CreateFromYawPitchRoll(System.Double,System.Double,System.Double)">
            <summary>
            Creates a new rotation <see cref="T:Duality.Matrix4"/> from the specified yaw, pitch and roll values.
            </summary>
            <param name="yaw">The yaw rotation value in radians.</param>
            <param name="pitch">The pitch rotation value in radians.</param>
            <param name="roll">The roll rotation value in radians.</param>
            <returns>The rotation <see cref="T:Duality.Matrix4"/>.</returns>
            <remarks>For more information about yaw, pitch and roll visit http://en.wikipedia.org/wiki/Euler_angles.
            </remarks>
        </member>
        <member name="M:Duality.Matrix4.CreateFromYawPitchRoll(System.Double,System.Double,System.Double,Duality.Matrix4@)">
            <summary>
            Creates a new rotation <see cref="T:Duality.Matrix4"/> from the specified yaw, pitch and roll values.
            </summary>
            <param name="yaw">The yaw rotation value in radians.</param>
            <param name="pitch">The pitch rotation value in radians.</param>
            <param name="roll">The roll rotation value in radians.</param>
            <param name="result">The rotation <see cref="T:Duality.Matrix4"/> as an output parameter.</param>
            <remarks>For more information about yaw, pitch and roll visit http://en.wikipedia.org/wiki/Euler_angles.
            </remarks>
        </member>
        <member name="M:Duality.Matrix4.CreateLookAt(Duality.Vector3,Duality.Vector3,Duality.Vector3)">
            <summary>
            Creates a new viewing <see cref="T:Duality.Matrix4"/>.
            </summary>
            <param name="cameraPosition">Position of the camera.</param>
            <param name="cameraTarget">Lookup vector of the camera.</param>
            <param name="cameraUpVector">The direction of the upper edge of the camera.</param>
            <returns>The viewing <see cref="T:Duality.Matrix4"/>.</returns>
        </member>
        <member name="M:Duality.Matrix4.CreateLookAt(Duality.Vector3@,Duality.Vector3@,Duality.Vector3@,Duality.Matrix4@)">
            <summary>
            Creates a new viewing <see cref="T:Duality.Matrix4"/>.
            </summary>
            <param name="cameraPosition">Position of the camera.</param>
            <param name="cameraTarget">Lookup vector of the camera.</param>
            <param name="cameraUpVector">The direction of the upper edge of the camera.</param>
            <param name="result">The viewing <see cref="T:Duality.Matrix4"/> as an output parameter.</param>
        </member>
        <member name="M:Duality.Matrix4.CreateOrthographic(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new projection <see cref="T:Duality.Matrix4"/> for orthographic view.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="zNearPlane">Depth of the near plane.</param>
            <param name="zFarPlane">Depth of the far plane.</param>
            <returns>The new projection <see cref="T:Duality.Matrix4"/> for orthographic view.</returns>
        </member>
        <member name="M:Duality.Matrix4.CreateOrthographic(System.Double,System.Double,System.Double,System.Double,Duality.Matrix4@)">
            <summary>
            Creates a new projection <see cref="T:Duality.Matrix4"/> for orthographic view.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="zNearPlane">Depth of the near plane.</param>
            <param name="zFarPlane">Depth of the far plane.</param>
            <param name="result">The new projection <see cref="T:Duality.Matrix4"/> for orthographic view as an output parameter.</param>
        </member>
        <member name="M:Duality.Matrix4.CreateOrthographicOffCenter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Duality.Matrix4@)">
            <summary>
            Creates a new projection <see cref="T:Duality.Matrix4"/> for customized orthographic view.
            </summary>
            <param name="left">Lower x-value at the near plane.</param>
            <param name="right">Upper x-value at the near plane.</param>
            <param name="bottom">Lower y-coordinate at the near plane.</param>
            <param name="top">Upper y-value at the near plane.</param>
            <param name="zNearPlane">Depth of the near plane.</param>
            <param name="zFarPlane">Depth of the far plane.</param>
            <param name="result">The new projection <see cref="T:Duality.Matrix4"/> for customized orthographic view as an output parameter.</param>
        </member>
        <member name="M:Duality.Matrix4.CreatePerspective(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new projection <see cref="T:Duality.Matrix4"/> for perspective view.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="nearPlaneDistance">Distance to the near plane.</param>
            <param name="farPlaneDistance">Distance to the far plane.</param>
            <returns>The new projection <see cref="T:Duality.Matrix4"/> for perspective view.</returns>
        </member>
        <member name="M:Duality.Matrix4.CreatePerspective(System.Double,System.Double,System.Double,System.Double,Duality.Matrix4@)">
            <summary>
            Creates a new projection <see cref="T:Duality.Matrix4"/> for perspective view.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="nearPlaneDistance">Distance to the near plane.</param>
            <param name="farPlaneDistance">Distance to the far plane, or <see cref="F:System.Double.PositiveInfinity"/>.</param>
            <param name="result">The new projection <see cref="T:Duality.Matrix4"/> for perspective view as an output parameter.</param>
        </member>
        <member name="M:Duality.Matrix4.CreatePerspectiveFieldOfView(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new projection <see cref="T:Duality.Matrix4"/> for perspective view with field of view.
            </summary>
            <param name="fieldOfView">Field of view in the y direction in radians.</param>
            <param name="aspectRatio">Width divided by height of the viewing volume.</param>
            <param name="nearPlaneDistance">Distance to the near plane.</param>
            <param name="farPlaneDistance">Distance to the far plane, or <see cref="F:System.Double.PositiveInfinity"/>.</param>
            <returns>The new projection <see cref="T:Duality.Matrix4"/> for perspective view with FOV.</returns>
        </member>
        <member name="M:Duality.Matrix4.CreatePerspectiveFieldOfView(System.Double,System.Double,System.Double,System.Double,Duality.Matrix4@)">
            <summary>
            Creates a new projection <see cref="T:Duality.Matrix4"/> for perspective view with field of view.
            </summary>
            <param name="fieldOfView">Field of view in the y direction in radians.</param>
            <param name="aspectRatio">Width divided by height of the viewing volume.</param>
            <param name="nearPlaneDistance">Distance of the near plane.</param>
            <param name="farPlaneDistance">Distance of the far plane, or <see cref="F:System.Double.PositiveInfinity"/>.</param>
            <param name="result">The new projection <see cref="T:Duality.Matrix4"/> for perspective view with FOV as an output parameter.</param>
        </member>
        <member name="M:Duality.Matrix4.CreatePerspectiveOffCenter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Duality.Matrix4@)">
            <summary>
            Creates a new projection <see cref="T:Duality.Matrix4"/> for customized perspective view.
            </summary>
            <param name="left">Lower x-value at the near plane.</param>
            <param name="right">Upper x-value at the near plane.</param>
            <param name="bottom">Lower y-coordinate at the near plane.</param>
            <param name="top">Upper y-value at the near plane.</param>
            <param name="nearPlaneDistance">Distance to the near plane.</param>
            <param name="farPlaneDistance">Distance to the far plane.</param>
            <param name="result">The new <see cref="T:Duality.Matrix4"/> for customized perspective view as an output parameter.</param>
        </member>
        <member name="M:Duality.Matrix4.CreateRotationX(System.Double)">
            <summary>
            Creates a new rotation <see cref="T:Duality.Matrix4"/> around X axis.
            </summary>
            <param name="radians">Angle in radians.</param>
            <returns>The rotation <see cref="T:Duality.Matrix4"/> around X axis.</returns>
        </member>
        <member name="M:Duality.Matrix4.CreateRotationX(System.Double,Duality.Matrix4@)">
            <summary>
            Creates a new rotation <see cref="T:Duality.Matrix4"/> around X axis.
            </summary>
            <param name="radians">Angle in radians.</param>
            <param name="result">The rotation <see cref="T:Duality.Matrix4"/> around X axis as an output parameter.</param>
        </member>
        <member name="M:Duality.Matrix4.CreateRotationY(System.Double)">
            <summary>
            Creates a new rotation <see cref="T:Duality.Matrix4"/> around Y axis.
            </summary>
            <param name="radians">Angle in radians.</param>
            <returns>The rotation <see cref="T:Duality.Matrix4"/> around Y axis.</returns>
        </member>
        <member name="M:Duality.Matrix4.CreateRotationY(System.Double,Duality.Matrix4@)">
            <summary>
            Creates a new rotation <see cref="T:Duality.Matrix4"/> around Y axis.
            </summary>
            <param name="radians">Angle in radians.</param>
            <param name="result">The rotation <see cref="T:Duality.Matrix4"/> around Y axis as an output parameter.</param>
        </member>
        <member name="M:Duality.Matrix4.CreateRotationZ(System.Double)">
            <summary>
            Creates a new rotation <see cref="T:Duality.Matrix4"/> around Z axis.
            </summary>
            <param name="radians">Angle in radians.</param>
            <returns>The rotation <see cref="T:Duality.Matrix4"/> around Z axis.</returns>
        </member>
        <member name="M:Duality.Matrix4.CreateRotationZ(System.Double,Duality.Matrix4@)">
            <summary>
            Creates a new rotation <see cref="T:Duality.Matrix4"/> around Z axis.
            </summary>
            <param name="radians">Angle in radians.</param>
            <param name="result">The rotation <see cref="T:Duality.Matrix4"/> around Z axis as an output parameter.</param>
        </member>
        <member name="M:Duality.Matrix4.CreateScale(System.Double)">
            <summary>
            Creates a new scaling <see cref="T:Duality.Matrix4"/>.
            </summary>
            <param name="scale">Scale value for all three axises.</param>
            <returns>The scaling <see cref="T:Duality.Matrix4"/>.</returns>
        </member>
        <member name="M:Duality.Matrix4.CreateScale(System.Double,Duality.Matrix4@)">
            <summary>
            Creates a new scaling <see cref="T:Duality.Matrix4"/>.
            </summary>
            <param name="scale">Scale value for all three axises.</param>
            <param name="result">The scaling <see cref="T:Duality.Matrix4"/> as an output parameter.</param>
        </member>
        <member name="M:Duality.Matrix4.CreateScale(System.Double,System.Double,System.Double)">
            <summary>
            Creates a new scaling <see cref="T:Duality.Matrix4"/>.
            </summary>
            <param name="xScale">Scale value for X axis.</param>
            <param name="yScale">Scale value for Y axis.</param>
            <param name="zScale">Scale value for Z axis.</param>
            <returns>The scaling <see cref="T:Duality.Matrix4"/>.</returns>
        </member>
        <member name="M:Duality.Matrix4.CreateScale(System.Double,System.Double,System.Double,Duality.Matrix4@)">
            <summary>
            Creates a new scaling <see cref="T:Duality.Matrix4"/>.
            </summary>
            <param name="xScale">Scale value for X axis.</param>
            <param name="yScale">Scale value for Y axis.</param>
            <param name="zScale">Scale value for Z axis.</param>
            <param name="result">The scaling <see cref="T:Duality.Matrix4"/> as an output parameter.</param>
        </member>
        <member name="M:Duality.Matrix4.CreateScale(Duality.Vector3)">
            <summary>
            Creates a new scaling <see cref="T:Duality.Matrix4"/>.
            </summary>
            <param name="scales"><see cref="T:Duality.Vector3"/> representing x,y and z scale values.</param>
            <returns>The scaling <see cref="T:Duality.Matrix4"/>.</returns>
        </member>
        <member name="M:Duality.Matrix4.CreateScale(Duality.Vector3@,Duality.Matrix4@)">
            <summary>
            Creates a new scaling <see cref="T:Duality.Matrix4"/>.
            </summary>
            <param name="scales"><see cref="T:Duality.Vector3"/> representing x,y and z scale values.</param>
            <param name="result">The scaling <see cref="T:Duality.Matrix4"/> as an output parameter.</param>
        </member>
        <member name="M:Duality.Matrix4.CreateShadow(Duality.Vector3,Duality.Plane)">
            <summary>
            Creates a new <see cref="T:Duality.Matrix4"/> that flattens geometry into a specified <see cref="T:Duality.Plane"/> as if casting a shadow from a specified light source. 
            </summary>
            <param name="lightDirection">A vector specifying the direction from which the light that will cast the shadow is coming.</param>
            <param name="plane">The plane onto which the new matrix should flatten geometry so as to cast a shadow.</param>
            <returns>A <see cref="T:Duality.Matrix4"/> that can be used to flatten geometry onto the specified plane from the specified direction. </returns>
        </member>
        <member name="M:Duality.Matrix4.CreateShadow(Duality.Vector3@,Duality.Plane@,Duality.Matrix4@)">
            <summary>
            Creates a new <see cref="T:Duality.Matrix4"/> that flattens geometry into a specified <see cref="T:Duality.Plane"/> as if casting a shadow from a specified light source. 
            </summary>
            <param name="lightDirection">A vector specifying the direction from which the light that will cast the shadow is coming.</param>
            <param name="plane">The plane onto which the new matrix should flatten geometry so as to cast a shadow.</param>
            <param name="result">A <see cref="T:Duality.Matrix4"/> that can be used to flatten geometry onto the specified plane from the specified direction as an output parameter.</param>
        </member>
        <member name="M:Duality.Matrix4.CreateTranslation(System.Double,System.Double,System.Double)">
            <summary>
            Creates a new translation <see cref="!:Matrix"/>.
            </summary>
            <param name="xPosition">X coordinate of translation.</param>
            <param name="yPosition">Y coordinate of translation.</param>
            <param name="zPosition">Z coordinate of translation.</param>
            <returns>The translation <see cref="!:Matrix"/>.</returns>
        </member>
        <member name="M:Duality.Matrix4.CreateTranslation(Duality.Vector3@,Duality.Matrix4@)">
            <summary>
            Creates a new translation <see cref="T:Duality.Matrix4"/>.
            </summary>
            <param name="position">X,Y and Z coordinates of translation.</param>
            <param name="result">The translation <see cref="T:Duality.Matrix4"/> as an output parameter.</param>
        </member>
        <member name="M:Duality.Matrix4.CreateTranslation(Duality.Vector3)">
            <summary>
            Creates a new translation <see cref="T:Duality.Matrix4"/>.
            </summary>
            <param name="position">X,Y and Z coordinates of translation.</param>
            <returns>The translation <see cref="T:Duality.Matrix4"/>.</returns>
        </member>
        <member name="M:Duality.Matrix4.CreateTranslation(System.Double,System.Double,System.Double,Duality.Matrix4@)">
            <summary>
            Creates a new translation <see cref="T:Duality.Matrix4"/>.
            </summary>
            <param name="xPosition">X coordinate of translation.</param>
            <param name="yPosition">Y coordinate of translation.</param>
            <param name="zPosition">Z coordinate of translation.</param>
            <param name="result">The translation <see cref="T:Duality.Matrix4"/> as an output parameter.</param>
        </member>
        <member name="M:Duality.Matrix4.CreateReflection(Duality.Plane)">
            <summary>
            Creates a new reflection <see cref="T:Duality.Matrix4"/>.
            </summary>
            <param name="value">The plane that used for reflection calculation.</param>
            <returns>The reflection <see cref="T:Duality.Matrix4"/>.</returns>
        </member>
        <member name="M:Duality.Matrix4.CreateReflection(Duality.Plane@,Duality.Matrix4@)">
            <summary>
            Creates a new reflection <see cref="T:Duality.Matrix4"/>.
            </summary>
            <param name="value">The plane that used for reflection calculation.</param>
            <param name="result">The reflection <see cref="T:Duality.Matrix4"/> as an output parameter.</param>
        </member>
        <member name="M:Duality.Matrix4.CreateWorld(Duality.Vector3,Duality.Vector3,Duality.Vector3)">
            <summary>
            Creates a new world <see cref="T:Duality.Matrix4"/>.
            </summary>
            <param name="position">The position vector.</param>
            <param name="forward">The forward direction vector.</param>
            <param name="up">The upward direction vector. Usually <see cref="P:Duality.Vector3.Up"/>.</param>
            <returns>The world <see cref="T:Duality.Matrix4"/>.</returns>
        </member>
        <member name="M:Duality.Matrix4.CreateWorld(Duality.Vector3@,Duality.Vector3@,Duality.Vector3@,Duality.Matrix4@)">
            <summary>
            Creates a new world <see cref="T:Duality.Matrix4"/>.
            </summary>
            <param name="position">The position vector.</param>
            <param name="forward">The forward direction vector.</param>
            <param name="up">The upward direction vector. Usually <see cref="P:Duality.Vector3.Up"/>.</param>
            <param name="result">The world <see cref="T:Duality.Matrix4"/> as an output parameter.</param>
        </member>
        <member name="M:Duality.Matrix4.Decompose(Duality.Vector3@,Duality.Quaternion@,Duality.Vector3@)">
            <summary>
            Decomposes this matrix to translation, rotation and scale elements. Returns <c>true</c> if matrix can be decomposed; <c>false</c> otherwise.
            </summary>
            <param name="scale">Scale vector as an output parameter.</param>
            <param name="rotation">Rotation quaternion as an output parameter.</param>
            <param name="translation">Translation vector as an output parameter.</param>
            <returns><c>true</c> if matrix can be decomposed; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Duality.Matrix4.Divide(Duality.Matrix4,Duality.Matrix4)">
            <summary>
            Divides the elements of a <see cref="T:Duality.Matrix4"/> by the elements of another matrix.
            </summary>
            <param name="matrix1">Source <see cref="T:Duality.Matrix4"/>.</param>
            <param name="matrix2">Divisor <see cref="T:Duality.Matrix4"/>.</param>
            <returns>The result of dividing the matrix.</returns>
        </member>
        <member name="M:Duality.Matrix4.Divide(Duality.Matrix4@,Duality.Matrix4@,Duality.Matrix4@)">
            <summary>
            Divides the elements of a <see cref="T:Duality.Matrix4"/> by the elements of another matrix.
            </summary>
            <param name="matrix1">Source <see cref="T:Duality.Matrix4"/>.</param>
            <param name="matrix2">Divisor <see cref="T:Duality.Matrix4"/>.</param>
            <param name="result">The result of dividing the matrix as an output parameter.</param>
        </member>
        <member name="M:Duality.Matrix4.Divide(Duality.Matrix4,System.Double)">
            <summary>
            Divides the elements of a <see cref="T:Duality.Matrix4"/> by a scalar.
            </summary>
            <param name="matrix1">Source <see cref="T:Duality.Matrix4"/>.</param>
            <param name="divider">Divisor scalar.</param>
            <returns>The result of dividing a matrix by a scalar.</returns>
        </member>
        <member name="M:Duality.Matrix4.Divide(Duality.Matrix4@,System.Double,Duality.Matrix4@)">
            <summary>
            Divides the elements of a <see cref="T:Duality.Matrix4"/> by a scalar.
            </summary>
            <param name="matrix1">Source <see cref="T:Duality.Matrix4"/>.</param>
            <param name="divider">Divisor scalar.</param>
            <param name="result">The result of dividing a matrix by a scalar as an output parameter.</param>
        </member>
        <member name="M:Duality.Matrix4.Equals(Duality.Matrix4)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:Duality.Matrix4"/> without any tolerance.
            </summary>
            <param name="other">The <see cref="T:Duality.Matrix4"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Duality.Matrix4.Equals(System.Object)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:System.Object"/> without any tolerance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Duality.Matrix4.GetHashCode">
            <summary>
            Gets the hash code of this <see cref="T:Duality.Matrix4"/>.
            </summary>
            <returns>Hash code of this <see cref="T:Duality.Matrix4"/>.</returns>
        </member>
        <member name="M:Duality.Matrix4.Invert(Duality.Matrix4)">
            <summary>
            Creates a new <see cref="T:Duality.Matrix4"/> which contains inversion of the specified matrix. 
            </summary>
            <param name="matrix">Source <see cref="T:Duality.Matrix4"/>.</param>
            <returns>The inverted matrix.</returns>
        </member>
        <member name="M:Duality.Matrix4.Invert(Duality.Matrix4@,Duality.Matrix4@)">
            <summary>
            Creates a new <see cref="T:Duality.Matrix4"/> which contains inversion of the specified matrix. 
            </summary>
            <param name="matrix">Source <see cref="T:Duality.Matrix4"/>.</param>
            <param name="result">The inverted matrix as output parameter.</param>
        </member>
        <member name="M:Duality.Matrix4.Lerp(Duality.Matrix4,Duality.Matrix4,System.Double)">
            <summary>
            Creates a new <see cref="T:Duality.Matrix4"/> that contains linear interpolation of the values in specified matrixes.
            </summary>
            <param name="matrix1">The first <see cref="T:Duality.Matrix4"/>.</param>
            <param name="matrix2">The second <see cref="T:Duality.Vector2"/>.</param>
            <param name="amount">Weighting value(between 0.0 and 1.0).</param>
            <returns>>The result of linear interpolation of the specified matrixes.</returns>
        </member>
        <member name="M:Duality.Matrix4.Lerp(Duality.Matrix4@,Duality.Matrix4@,System.Double,Duality.Matrix4@)">
            <summary>
            Creates a new <see cref="T:Duality.Matrix4"/> that contains linear interpolation of the values in specified matrixes.
            </summary>
            <param name="matrix1">The first <see cref="T:Duality.Matrix4"/>.</param>
            <param name="matrix2">The second <see cref="T:Duality.Vector2"/>.</param>
            <param name="amount">Weighting value(between 0.0 and 1.0).</param>
            <param name="result">The result of linear interpolation of the specified matrixes as an output parameter.</param>
        </member>
        <member name="M:Duality.Matrix4.Multiply(Duality.Matrix4,Duality.Matrix4)">
            <summary>
            Creates a new <see cref="T:Duality.Matrix4"/> that contains a multiplication of two matrix.
            </summary>
            <param name="matrix1">Source <see cref="T:Duality.Matrix4"/>.</param>
            <param name="matrix2">Source <see cref="T:Duality.Matrix4"/>.</param>
            <returns>Result of the matrix multiplication.</returns>
        </member>
        <member name="M:Duality.Matrix4.Multiply(Duality.Matrix4@,Duality.Matrix4@,Duality.Matrix4@)">
            <summary>
            Creates a new <see cref="T:Duality.Matrix4"/> that contains a multiplication of two matrix.
            </summary>
            <param name="matrix1">Source <see cref="T:Duality.Matrix4"/>.</param>
            <param name="matrix2">Source <see cref="T:Duality.Matrix4"/>.</param>
            <param name="result">Result of the matrix multiplication as an output parameter.</param>
        </member>
        <member name="M:Duality.Matrix4.Multiply(Duality.Matrix4,System.Double)">
            <summary>
            Creates a new <see cref="T:Duality.Matrix4"/> that contains a multiplication of <see cref="T:Duality.Matrix4"/> and a scalar.
            </summary>
            <param name="matrix1">Source <see cref="T:Duality.Matrix4"/>.</param>
            <param name="scaleFactor">Scalar value.</param>
            <returns>Result of the matrix multiplication with a scalar.</returns>
        </member>
        <member name="M:Duality.Matrix4.Multiply(Duality.Matrix4@,System.Double,Duality.Matrix4@)">
            <summary>
            Creates a new <see cref="T:Duality.Matrix4"/> that contains a multiplication of <see cref="T:Duality.Matrix4"/> and a scalar.
            </summary>
            <param name="matrix1">Source <see cref="T:Duality.Matrix4"/>.</param>
            <param name="scaleFactor">Scalar value.</param>
            <param name="result">Result of the matrix multiplication with a scalar as an output parameter.</param>
        </member>
        <member name="M:Duality.Matrix4.TodoubleArray(Duality.Matrix4)">
            <summary>
            Copy the values of specified <see cref="T:Duality.Matrix4"/> to the double array.
            </summary>
            <param name="matrix">The source <see cref="T:Duality.Matrix4"/>.</param>
            <returns>The array which matrix values will be stored.</returns>
            <remarks>
            Required for OpenGL 2.0 projection matrix stuff.
            </remarks>
        </member>
        <member name="M:Duality.Matrix4.Negate(Duality.Matrix4)">
            <summary>
            Returns a matrix with the all values negated.
            </summary>
            <param name="matrix">Source <see cref="T:Duality.Matrix4"/>.</param>
            <returns>Result of the matrix negation.</returns>
        </member>
        <member name="M:Duality.Matrix4.Negate(Duality.Matrix4@,Duality.Matrix4@)">
            <summary>
            Returns a matrix with the all values negated.
            </summary>
            <param name="matrix">Source <see cref="T:Duality.Matrix4"/>.</param>
            <param name="result">Result of the matrix negation as an output parameter.</param>
        </member>
        <member name="M:Duality.Matrix4.op_Addition(Duality.Matrix4,Duality.Matrix4)">
            <summary>
            Adds two matrixes.
            </summary>
            <param name="matrix1">Source <see cref="T:Duality.Matrix4"/> on the left of the add sign.</param>
            <param name="matrix2">Source <see cref="T:Duality.Matrix4"/> on the right of the add sign.</param>
            <returns>Sum of the matrixes.</returns>
        </member>
        <member name="M:Duality.Matrix4.op_Division(Duality.Matrix4,Duality.Matrix4)">
            <summary>
            Divides the elements of a <see cref="T:Duality.Matrix4"/> by the elements of another <see cref="T:Duality.Matrix4"/>.
            </summary>
            <param name="matrix1">Source <see cref="T:Duality.Matrix4"/> on the left of the div sign.</param>
            <param name="matrix2">Divisor <see cref="T:Duality.Matrix4"/> on the right of the div sign.</param>
            <returns>The result of dividing the matrixes.</returns>
        </member>
        <member name="M:Duality.Matrix4.op_Division(Duality.Matrix4,System.Double)">
            <summary>
            Divides the elements of a <see cref="T:Duality.Matrix4"/> by a scalar.
            </summary>
            <param name="matrix">Source <see cref="T:Duality.Matrix4"/> on the left of the div sign.</param>
            <param name="divider">Divisor scalar on the right of the div sign.</param>
            <returns>The result of dividing a matrix by a scalar.</returns>
        </member>
        <member name="M:Duality.Matrix4.op_Equality(Duality.Matrix4,Duality.Matrix4)">
            <summary>
            Compares whether two <see cref="T:Duality.Matrix4"/> instances are equal without any tolerance.
            </summary>
            <param name="matrix1">Source <see cref="T:Duality.Matrix4"/> on the left of the equal sign.</param>
            <param name="matrix2">Source <see cref="T:Duality.Matrix4"/> on the right of the equal sign.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Duality.Matrix4.op_Inequality(Duality.Matrix4,Duality.Matrix4)">
            <summary>
            Compares whether two <see cref="T:Duality.Matrix4"/> instances are not equal without any tolerance.
            </summary>
            <param name="matrix1">Source <see cref="T:Duality.Matrix4"/> on the left of the not equal sign.</param>
            <param name="matrix2">Source <see cref="T:Duality.Matrix4"/> on the right of the not equal sign.</param>
            <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Duality.Matrix4.op_Multiply(Duality.Matrix4,Duality.Matrix4)">
            <summary>
            Multiplies two matrixes.
            </summary>
            <param name="matrix1">Source <see cref="T:Duality.Matrix4"/> on the left of the mul sign.</param>
            <param name="matrix2">Source <see cref="T:Duality.Matrix4"/> on the right of the mul sign.</param>
            <returns>Result of the matrix multiplication.</returns>
            <remarks>
            Using matrix multiplication algorithm - see http://en.wikipedia.org/wiki/Matrix_multiplication.
            </remarks>
        </member>
        <member name="M:Duality.Matrix4.op_Multiply(Duality.Matrix4,System.Double)">
            <summary>
            Multiplies the elements of matrix by a scalar.
            </summary>
            <param name="matrix">Source <see cref="T:Duality.Matrix4"/> on the left of the mul sign.</param>
            <param name="scaleFactor">Scalar value on the right of the mul sign.</param>
            <returns>Result of the matrix multiplication with a scalar.</returns>
        </member>
        <member name="M:Duality.Matrix4.op_Subtraction(Duality.Matrix4,Duality.Matrix4)">
            <summary>
            Subtracts the values of one <see cref="T:Duality.Matrix4"/> from another <see cref="T:Duality.Matrix4"/>.
            </summary>
            <param name="matrix1">Source <see cref="T:Duality.Matrix4"/> on the left of the sub sign.</param>
            <param name="matrix2">Source <see cref="T:Duality.Matrix4"/> on the right of the sub sign.</param>
            <returns>Result of the matrix subtraction.</returns>
        </member>
        <member name="M:Duality.Matrix4.op_UnaryNegation(Duality.Matrix4)">
            <summary>
            Inverts values in the specified <see cref="T:Duality.Matrix4"/>.
            </summary>
            <param name="matrix">Source <see cref="T:Duality.Matrix4"/> on the right of the sub sign.</param>
            <returns>Result of the inversion.</returns>
        </member>
        <member name="M:Duality.Matrix4.Subtract(Duality.Matrix4,Duality.Matrix4)">
            <summary>
            Creates a new <see cref="T:Duality.Matrix4"/> that contains subtraction of one matrix from another.
            </summary>
            <param name="matrix1">The first <see cref="T:Duality.Matrix4"/>.</param>
            <param name="matrix2">The second <see cref="T:Duality.Matrix4"/>.</param>
            <returns>The result of the matrix subtraction.</returns>
        </member>
        <member name="M:Duality.Matrix4.Subtract(Duality.Matrix4@,Duality.Matrix4@,Duality.Matrix4@)">
            <summary>
            Creates a new <see cref="T:Duality.Matrix4"/> that contains subtraction of one matrix from another.
            </summary>
            <param name="matrix1">The first <see cref="T:Duality.Matrix4"/>.</param>
            <param name="matrix2">The second <see cref="T:Duality.Matrix4"/>.</param>
            <param name="result">The result of the matrix subtraction as an output parameter.</param>
        </member>
        <member name="M:Duality.Matrix4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this <see cref="T:Duality.Matrix4"/> in the format:
            {M11:[<see cref="P:Duality.Matrix4.M11"/>] M12:[<see cref="P:Duality.Matrix4.M12"/>] M13:[<see cref="P:Duality.Matrix4.M13"/>] M14:[<see cref="P:Duality.Matrix4.M14"/>]}
            {M21:[<see cref="P:Duality.Matrix4.M21"/>] M12:[<see cref="P:Duality.Matrix4.M22"/>] M13:[<see cref="P:Duality.Matrix4.M23"/>] M14:[<see cref="P:Duality.Matrix4.M24"/>]}
            {M31:[<see cref="P:Duality.Matrix4.M31"/>] M32:[<see cref="P:Duality.Matrix4.M32"/>] M33:[<see cref="P:Duality.Matrix4.M33"/>] M34:[<see cref="P:Duality.Matrix4.M34"/>]}
            {M41:[<see cref="P:Duality.Matrix4.M41"/>] M42:[<see cref="P:Duality.Matrix4.M42"/>] M43:[<see cref="P:Duality.Matrix4.M43"/>] M44:[<see cref="P:Duality.Matrix4.M44"/>]}
            </summary>
            <returns>A <see cref="T:System.String"/> representation of this <see cref="T:Duality.Matrix4"/>.</returns>
        </member>
        <member name="M:Duality.Matrix4.Transpose(Duality.Matrix4)">
            <summary>
            Swap the matrix rows and columns.
            </summary>
            <param name="matrix">The matrix for transposing operation.</param>
            <returns>The new <see cref="T:Duality.Matrix4"/> which contains the transposing result.</returns>
        </member>
        <member name="M:Duality.Matrix4.Transpose(Duality.Matrix4@,Duality.Matrix4@)">
            <summary>
            Swap the matrix rows and columns.
            </summary>
            <param name="matrix">The matrix for transposing operation.</param>
            <param name="result">The new <see cref="T:Duality.Matrix4"/> which contains the transposing result as an output parameter.</param>
        </member>
        <member name="M:Duality.PlaneHelper.ClassifyPoint(Duality.Vector3@,Duality.Plane@)">
            <summary>
            Returns a value indicating what side (positive/negative) of a plane a point is
            </summary>
            <param name="point">The point to check with</param>
            <param name="plane">The plane to check against</param>
            <returns>Greater than zero if on the positive side, less than zero if on the negative size, 0 otherwise</returns>
        </member>
        <member name="M:Duality.PlaneHelper.PerpendicularDistance(Duality.Vector3@,Duality.Plane@)">
            <summary>
            Returns the perpendicular distance from a point to a plane
            </summary>
            <param name="point">The point to check</param>
            <param name="plane">The place to check</param>
            <returns>The perpendicular distance from the point to the plane</returns>
        </member>
        <member name="M:Duality.Plane.Transform(Duality.Plane,Duality.Matrix4)">
            <summary>
            Transforms a normalized plane by a matrix.
            </summary>
            <param name="plane">The normalized plane to transform.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed plane.</returns>
        </member>
        <member name="M:Duality.Plane.Transform(Duality.Plane@,Duality.Matrix4@,Duality.Plane@)">
            <summary>
            Transforms a normalized plane by a matrix.
            </summary>
            <param name="plane">The normalized plane to transform.</param>
            <param name="matrix">The transformation matrix.</param>
            <param name="result">The transformed plane.</param>
        </member>
        <member name="M:Duality.Plane.Transform(Duality.Plane,Duality.Quaternion)">
            <summary>
            Transforms a normalized plane by a quaternion rotation.
            </summary>
            <param name="plane">The normalized plane to transform.</param>
            <param name="rotation">The quaternion rotation.</param>
            <returns>The transformed plane.</returns>
        </member>
        <member name="M:Duality.Plane.Transform(Duality.Plane@,Duality.Quaternion@,Duality.Plane@)">
            <summary>
            Transforms a normalized plane by a quaternion rotation.
            </summary>
            <param name="plane">The normalized plane to transform.</param>
            <param name="rotation">The quaternion rotation.</param>
            <param name="result">The transformed plane.</param>
        </member>
        <member name="T:Duality.Point2">
            <summary>
            Represents a 2D point using two integer values. For vector math, see <see cref="T:Duality.Vector2"/>.
            </summary>
        </member>
        <member name="F:Duality.Point2.Zero">
            <summary>
            A point at the origin (0, 0).
            </summary>
        </member>
        <member name="F:Duality.Point2.X">
            <summary>
            The X component of the Point.
            </summary>
        </member>
        <member name="F:Duality.Point2.Y">
            <summary>
            The Y component of the Point.
            </summary>
        </member>
        <member name="P:Duality.Point2.Item(System.Int32)">
            <summary>
            Gets or sets the value at the index of the Point.
            </summary>
        </member>
        <member name="M:Duality.Point2.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new Point.
            </summary>
            <param name="x">The x coordinate of the Point.</param>
            <param name="y">The y coordinate of the Point.</param>
        </member>
        <member name="M:Duality.Point2.Min(Duality.Point2,Duality.Point2)">
            <summary>
            Calculate the component-wise minimum of two points.
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:Duality.Point2.Max(Duality.Point2,Duality.Point2)">
            <summary>
            Calculate the component-wise maximum of two points.
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:Duality.Point2.Distance(Duality.Point2,Duality.Point2)">
            <summary>
            Calculates the distance between two points described by two points. 
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:Duality.Point2.op_Addition(Duality.Point2,Duality.Point2)">
            <summary>
            Adds the specified points component-wise.
            </summary>
        </member>
        <member name="M:Duality.Point2.op_Subtraction(Duality.Point2,Duality.Point2)">
            <summary>
            Subtracts the specified points component-wise.
            </summary>
        </member>
        <member name="M:Duality.Point2.op_UnaryNegation(Duality.Point2)">
            <summary>
            Inverts the specified point component-wise,
            </summary>
        </member>
        <member name="M:Duality.Point2.op_Multiply(Duality.Point2,System.Int32)">
            <summary>
            Multiplies the specified point component-wise with the specified factor.
            </summary>
        </member>
        <member name="M:Duality.Point2.op_Multiply(System.Int32,Duality.Point2)">
            <summary>
            Multiplies the specified point component-wise with the specified factor.
            </summary>
        </member>
        <member name="M:Duality.Point2.op_Multiply(Duality.Point2,Duality.Point2)">
            <summary>
            Multiplies the specified points component-wise.
            </summary>
        </member>
        <member name="M:Duality.Point2.op_Division(Duality.Point2,System.Int32)">
            <summary>
            Divides the specified point component-wise with the specified value.
            </summary>
        </member>
        <member name="M:Duality.Point2.op_Division(Duality.Point2,Duality.Point2)">
            <summary>
            Divides the specified points component-wise.
            </summary>
        </member>
        <member name="M:Duality.Point2.op_Multiply(Duality.Point2,System.Double)">
            <summary>
            Multiplies the specified point component-wise with the specified factor.
            </summary>
        </member>
        <member name="M:Duality.Point2.op_Multiply(System.Double,Duality.Point2)">
            <summary>
            Multiplies the specified point component-wise with the specified factor.
            </summary>
        </member>
        <member name="M:Duality.Point2.op_Division(Duality.Point2,System.Double)">
            <summary>
            Divides the specified point component-wise with the specified value.
            </summary>
        </member>
        <member name="M:Duality.Point2.op_Equality(Duality.Point2,Duality.Point2)">
            <summary>
            Compares the specified instances for equality.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>True if both instances are equal; false otherwise.</returns>
        </member>
        <member name="M:Duality.Point2.op_Inequality(Duality.Point2,Duality.Point2)">
            <summary>
            Compares the specified instances for inequality.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>True if both instances are not equal; false otherwise.</returns>
        </member>
        <member name="M:Duality.Point2.ToString">
            <summary>
            Returns a System.String that represents the current Point.
            </summary>
        </member>
        <member name="M:Duality.Point2.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:Duality.Point2.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:Duality.Point2.Equals(Duality.Point2)">
            <summary>
            Indicates whether the current point is equal to another point.
            </summary>
            <param name="other">A point to compare with this point.</param>
            <returns>true if the current point is equal to the point parameter; otherwise, false.</returns>
        </member>
        <member name="T:Duality.Quaternion">
            <summary>
            Represents a Quaternion.
            </summary>
        </member>
        <member name="F:Duality.Quaternion.X">
            <summary>
            The x coordinate of this <see cref="T:Duality.Quaternion"/>.
            </summary>
        </member>
        <member name="F:Duality.Quaternion.Y">
            <summary>
            The y coordinate of this <see cref="T:Duality.Quaternion"/>.
            </summary>
        </member>
        <member name="F:Duality.Quaternion.Z">
            <summary>
            The z coordinate of this <see cref="T:Duality.Quaternion"/>.
            </summary>
        </member>
        <member name="F:Duality.Quaternion.W">
            <summary>
            The rotation component of this <see cref="T:Duality.Quaternion"/>.
            </summary>
        </member>
        <member name="M:Duality.Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a quaternion with X, Y, Z and W from four values.
            </summary>
            <param name="x">The x coordinate in 3d-space.</param>
            <param name="y">The y coordinate in 3d-space.</param>
            <param name="z">The z coordinate in 3d-space.</param>
            <param name="w">The rotation component.</param>
        </member>
        <member name="M:Duality.Quaternion.#ctor(Duality.Vector3,System.Double)">
            <summary>
            Constructs a quaternion with X, Y, Z from <see cref="T:Duality.Vector3"/> and rotation component from a scalar.
            </summary>
            <param name="value">The x, y, z coordinates in 3d-space.</param>
            <param name="w">The rotation component.</param>
        </member>
        <member name="M:Duality.Quaternion.#ctor(Duality.Vector4)">
            <summary>
            Constructs a quaternion from <see cref="T:Duality.Vector4"/>.
            </summary>
            <param name="value">The x, y, z coordinates in 3d-space and the rotation component.</param>
        </member>
        <member name="P:Duality.Quaternion.Identity">
            <summary>
            Returns a quaternion representing no rotation.
            </summary>
        </member>
        <member name="P:Duality.Quaternion.EulerAngles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Duality.Quaternion.Add(Duality.Quaternion,Duality.Quaternion)">
            <summary>
            Creates a new <see cref="T:Duality.Quaternion"/> that contains the sum of two quaternions.
            </summary>
            <param name="quaternion1">Source <see cref="T:Duality.Quaternion"/>.</param>
            <param name="quaternion2">Source <see cref="T:Duality.Quaternion"/>.</param>
            <returns>The result of the quaternion addition.</returns>
        </member>
        <member name="M:Duality.Quaternion.Add(Duality.Quaternion@,Duality.Quaternion@,Duality.Quaternion@)">
            <summary>
            Creates a new <see cref="T:Duality.Quaternion"/> that contains the sum of two quaternions.
            </summary>
            <param name="quaternion1">Source <see cref="T:Duality.Quaternion"/>.</param>
            <param name="quaternion2">Source <see cref="T:Duality.Quaternion"/>.</param>
            <param name="result">The result of the quaternion addition as an output parameter.</param>
        </member>
        <member name="M:Duality.Quaternion.Concatenate(Duality.Quaternion,Duality.Quaternion)">
            <summary>
            Creates a new <see cref="T:Duality.Quaternion"/> that contains concatenation between two quaternion.
            </summary>
            <param name="value1">The first <see cref="T:Duality.Quaternion"/> to concatenate.</param>
            <param name="value2">The second <see cref="T:Duality.Quaternion"/> to concatenate.</param>
            <returns>The result of rotation of <paramref name="value1"/> followed by <paramref name="value2"/> rotation.</returns>
        </member>
        <member name="M:Duality.Quaternion.Concatenate(Duality.Quaternion@,Duality.Quaternion@,Duality.Quaternion@)">
            <summary>
            Creates a new <see cref="T:Duality.Quaternion"/> that contains concatenation between two quaternion.
            </summary>
            <param name="value1">The first <see cref="T:Duality.Quaternion"/> to concatenate.</param>
            <param name="value2">The second <see cref="T:Duality.Quaternion"/> to concatenate.</param>
            <param name="result">The result of rotation of <paramref name="value1"/> followed by <paramref name="value2"/> rotation as an output parameter.</param>
        </member>
        <member name="M:Duality.Quaternion.Conjugate">
            <summary>
            Transforms this quaternion into its conjugated version.
            </summary>
        </member>
        <member name="M:Duality.Quaternion.Conjugate(Duality.Quaternion)">
            <summary>
            Creates a new <see cref="T:Duality.Quaternion"/> that contains conjugated version of the specified quaternion.
            </summary>
            <param name="value">The quaternion which values will be used to create the conjugated version.</param>
            <returns>The conjugate version of the specified quaternion.</returns>
        </member>
        <member name="M:Duality.Quaternion.Conjugate(Duality.Quaternion@,Duality.Quaternion@)">
            <summary>
            Creates a new <see cref="T:Duality.Quaternion"/> that contains conjugated version of the specified quaternion.
            </summary>
            <param name="value">The quaternion which values will be used to create the conjugated version.</param>
            <param name="result">The conjugated version of the specified quaternion as an output parameter.</param>
        </member>
        <member name="M:Duality.Quaternion.ToAxisAngle(Duality.Vector3@,System.Double@)">
            <summary>
            Convert the current quaternion to axis angle representation
            Creates a new <see cref="T:Duality.Quaternion"/> from the specified axis and angle.
            </summary>
            <param name="axis">The resultant axis</param>
            <param name="angle">The resultant angle</param>
        </member>
        <member name="M:Duality.Quaternion.ToAxisAngle">
            <summary>
            Convert this instance to an axis-angle representation.
            </summary>
            <returns>A Vector4 that is the axis-angle representation of this quaternion.</returns>
        </member>
        <member name="M:Duality.Quaternion.CreateFromAxisAngle(Duality.Vector3@,System.Double,Duality.Quaternion@)">
            <summary>
            Creates a new <see cref="T:Duality.Quaternion"/> from the specified axis and angle.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle in radians.</param>
            <param name="result">The new quaternion builded from axis and angle as an output parameter.</param>
        </member>
        <member name="M:Duality.Quaternion.CreateFromAxisAngle(Duality.Vector3,System.Double)">
            <summary>
            Creates a new <see cref="T:Duality.Quaternion"/> from the specified axis and angle.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle in radians.</param>
        </member>
        <member name="M:Duality.Quaternion.CreateFromRotationMatrix(Duality.Matrix4)">
            <summary>
            Creates a new <see cref="T:Duality.Quaternion"/> from the specified <see cref="T:Duality.Matrix4"/>.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <returns>A quaternion composed from the rotation part of the matrix.</returns>
        </member>
        <member name="M:Duality.Quaternion.CreateFromRotationMatrix(Duality.Matrix4@,Duality.Quaternion@)">
            <summary>
            Creates a new <see cref="T:Duality.Quaternion"/> from the specified <see cref="T:Duality.Matrix4"/>.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <param name="result">A quaternion composed from the rotation part of the matrix as an output parameter.</param>
        </member>
        <member name="M:Duality.Quaternion.CreateFromYawPitchRoll(System.Double,System.Double,System.Double)">
            <summary>
            Creates a new <see cref="T:Duality.Quaternion"/> from the specified yaw, pitch and roll angles.
            </summary>
            <param name="yaw">Yaw around the y axis in radians.</param>
            <param name="pitch">Pitch around the x axis in radians.</param>
            <param name="roll">Roll around the z axis in radians.</param>
            <returns>A new quaternion from the concatenated yaw, pitch, and roll angles.</returns>
        </member>
        <member name="M:Duality.Quaternion.CreateFromYawPitchRoll(System.Double,System.Double,System.Double,Duality.Quaternion@)">
            <summary>
            Creates a new <see cref="T:Duality.Quaternion"/> from the specified yaw, pitch and roll angles.
            </summary>
            <param name="yaw">Yaw around the y axis in radians.</param>
            <param name="pitch">Pitch around the x axis in radians.</param>
            <param name="roll">Roll around the z axis in radians.</param>
            <param name="result">A new quaternion from the concatenated yaw, pitch, and roll angles as an output parameter.</param>
        </member>
        <member name="M:Duality.Quaternion.Divide(Duality.Quaternion,Duality.Quaternion)">
            <summary>
            Divides a <see cref="T:Duality.Quaternion"/> by the other <see cref="T:Duality.Quaternion"/>.
            </summary>
            <param name="quaternion1">Source <see cref="T:Duality.Quaternion"/>.</param>
            <param name="quaternion2">Divisor <see cref="T:Duality.Quaternion"/>.</param>
            <returns>The result of dividing the quaternions.</returns>
        </member>
        <member name="M:Duality.Quaternion.Divide(Duality.Quaternion@,Duality.Quaternion@,Duality.Quaternion@)">
            <summary>
            Divides a <see cref="T:Duality.Quaternion"/> by the other <see cref="T:Duality.Quaternion"/>.
            </summary>
            <param name="quaternion1">Source <see cref="T:Duality.Quaternion"/>.</param>
            <param name="quaternion2">Divisor <see cref="T:Duality.Quaternion"/>.</param>
            <param name="result">The result of dividing the quaternions as an output parameter.</param>
        </member>
        <member name="M:Duality.Quaternion.Dot(Duality.Quaternion,Duality.Quaternion)">
            <summary>
            Returns a dot product of two quaternions.
            </summary>
            <param name="quaternion1">The first quaternion.</param>
            <param name="quaternion2">The second quaternion.</param>
            <returns>The dot product of two quaternions.</returns>
        </member>
        <member name="M:Duality.Quaternion.Dot(Duality.Quaternion@,Duality.Quaternion@,System.Double@)">
            <summary>
            Returns a dot product of two quaternions.
            </summary>
            <param name="quaternion1">The first quaternion.</param>
            <param name="quaternion2">The second quaternion.</param>
            <param name="result">The dot product of two quaternions as an output parameter.</param>
        </member>
        <member name="M:Duality.Quaternion.Equals(System.Object)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Duality.Quaternion.Equals(Duality.Quaternion)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:Duality.Quaternion"/>.
            </summary>
            <param name="other">The <see cref="T:Duality.Quaternion"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Duality.Quaternion.GetHashCode">
            <summary>
            Gets the hash code of this <see cref="T:Duality.Quaternion"/>.
            </summary>
            <returns>Hash code of this <see cref="T:Duality.Quaternion"/>.</returns>
        </member>
        <member name="M:Duality.Quaternion.Inverse(Duality.Quaternion)">
            <summary>
            Returns the inverse quaternion which represents the opposite rotation.
            </summary>
            <param name="quaternion">Source <see cref="T:Duality.Quaternion"/>.</param>
            <returns>The inverse quaternion.</returns>
        </member>
        <member name="M:Duality.Quaternion.Inverse(Duality.Quaternion@,Duality.Quaternion@)">
            <summary>
            Returns the inverse quaternion which represents the opposite rotation.
            </summary>
            <param name="quaternion">Source <see cref="T:Duality.Quaternion"/>.</param>
            <param name="result">The inverse quaternion as an output parameter.</param>
        </member>
        <member name="M:Duality.Quaternion.Invert(Duality.Quaternion@,Duality.Quaternion@)">
            <summary>
            Get the inverse of the given quaternion
            </summary>
            <param name="q">The quaternion to invert</param>
            <param name="result">The inverse of the given quaternion</param>
        </member>
        <member name="M:Duality.Quaternion.Length">
            <summary>
            Returns the magnitude of the quaternion components.
            </summary>
            <returns>The magnitude of the quaternion components.</returns>
        </member>
        <member name="M:Duality.Quaternion.LengthSquared">
            <summary>
            Returns the squared magnitude of the quaternion components.
            </summary>
            <returns>The squared magnitude of the quaternion components.</returns>
        </member>
        <member name="M:Duality.Quaternion.Lerp(Duality.Quaternion,Duality.Quaternion,System.Double)">
            <summary>
            Performs a linear blend between two quaternions.
            </summary>
            <param name="quaternion1">Source <see cref="T:Duality.Quaternion"/>.</param>
            <param name="quaternion2">Source <see cref="T:Duality.Quaternion"/>.</param>
            <param name="amount">The blend amount where 0 returns <paramref name="quaternion1"/> and 1 <paramref name="quaternion2"/>.</param>
            <returns>The result of linear blending between two quaternions.</returns>
        </member>
        <member name="M:Duality.Quaternion.Lerp(Duality.Quaternion@,Duality.Quaternion@,System.Double,Duality.Quaternion@)">
            <summary>
            Performs a linear blend between two quaternions.
            </summary>
            <param name="quaternion1">Source <see cref="T:Duality.Quaternion"/>.</param>
            <param name="quaternion2">Source <see cref="T:Duality.Quaternion"/>.</param>
            <param name="amount">The blend amount where 0 returns <paramref name="quaternion1"/> and 1 <paramref name="quaternion2"/>.</param>
            <param name="result">The result of linear blending between two quaternions as an output parameter.</param>
        </member>
        <member name="M:Duality.Quaternion.Slerp(Duality.Quaternion,Duality.Quaternion,System.Double)">
            <summary>
            Performs a spherical linear blend between two quaternions.
            </summary>
            <param name="quaternion1">Source <see cref="T:Duality.Quaternion"/>.</param>
            <param name="quaternion2">Source <see cref="T:Duality.Quaternion"/>.</param>
            <param name="amount">The blend amount where 0 returns <paramref name="quaternion1"/> and 1 <paramref name="quaternion2"/>.</param>
            <returns>The result of spherical linear blending between two quaternions.</returns>
        </member>
        <member name="M:Duality.Quaternion.Slerp(Duality.Quaternion@,Duality.Quaternion@,System.Double,Duality.Quaternion@)">
            <summary>
            Performs a spherical linear blend between two quaternions.
            </summary>
            <param name="quaternion1">Source <see cref="T:Duality.Quaternion"/>.</param>
            <param name="quaternion2">Source <see cref="T:Duality.Quaternion"/>.</param>
            <param name="amount">The blend amount where 0 returns <paramref name="quaternion1"/> and 1 <paramref name="quaternion2"/>.</param>
            <param name="result">The result of spherical linear blending between two quaternions as an output parameter.</param>
        </member>
        <member name="M:Duality.Quaternion.Subtract(Duality.Quaternion,Duality.Quaternion)">
            <summary>
            Creates a new <see cref="T:Duality.Quaternion"/> that contains subtraction of one <see cref="T:Duality.Quaternion"/> from another.
            </summary>
            <param name="quaternion1">Source <see cref="T:Duality.Quaternion"/>.</param>
            <param name="quaternion2">Source <see cref="T:Duality.Quaternion"/>.</param>
            <returns>The result of the quaternion subtraction.</returns>
        </member>
        <member name="M:Duality.Quaternion.Subtract(Duality.Quaternion@,Duality.Quaternion@,Duality.Quaternion@)">
            <summary>
            Creates a new <see cref="T:Duality.Quaternion"/> that contains subtraction of one <see cref="T:Duality.Quaternion"/> from another.
            </summary>
            <param name="quaternion1">Source <see cref="T:Duality.Quaternion"/>.</param>
            <param name="quaternion2">Source <see cref="T:Duality.Quaternion"/>.</param>
            <param name="result">The result of the quaternion subtraction as an output parameter.</param>
        </member>
        <member name="M:Duality.Quaternion.Multiply(Duality.Quaternion,Duality.Quaternion)">
            <summary>
            Creates a new <see cref="T:Duality.Quaternion"/> that contains a multiplication of two quaternions.
            </summary>
            <param name="quaternion1">Source <see cref="T:Duality.Quaternion"/>.</param>
            <param name="quaternion2">Source <see cref="T:Duality.Quaternion"/>.</param>
            <returns>The result of the quaternion multiplication.</returns>
        </member>
        <member name="M:Duality.Quaternion.Multiply(Duality.Quaternion,System.Double)">
            <summary>
            Creates a new <see cref="T:Duality.Quaternion"/> that contains a multiplication of <see cref="T:Duality.Quaternion"/> and a scalar.
            </summary>
            <param name="quaternion1">Source <see cref="T:Duality.Quaternion"/>.</param>
            <param name="scaleFactor">Scalar value.</param>
            <returns>The result of the quaternion multiplication with a scalar.</returns>
        </member>
        <member name="M:Duality.Quaternion.Multiply(Duality.Quaternion@,System.Double,Duality.Quaternion@)">
            <summary>
            Creates a new <see cref="T:Duality.Quaternion"/> that contains a multiplication of <see cref="T:Duality.Quaternion"/> and a scalar.
            </summary>
            <param name="quaternion1">Source <see cref="T:Duality.Quaternion"/>.</param>
            <param name="scaleFactor">Scalar value.</param>
            <param name="result">The result of the quaternion multiplication with a scalar as an output parameter.</param>
        </member>
        <member name="M:Duality.Quaternion.Multiply(Duality.Quaternion@,Duality.Quaternion@,Duality.Quaternion@)">
            <summary>
            Creates a new <see cref="T:Duality.Quaternion"/> that contains a multiplication of two quaternions.
            </summary>
            <param name="quaternion1">Source <see cref="T:Duality.Quaternion"/>.</param>
            <param name="quaternion2">Source <see cref="T:Duality.Quaternion"/>.</param>
            <param name="result">The result of the quaternion multiplication as an output parameter.</param>
        </member>
        <member name="M:Duality.Quaternion.Negate(Duality.Quaternion)">
            <summary>
            Flips the sign of the all the quaternion components.
            </summary>
            <param name="quaternion">Source <see cref="T:Duality.Quaternion"/>.</param>
            <returns>The result of the quaternion negation.</returns>
        </member>
        <member name="M:Duality.Quaternion.Negate(Duality.Quaternion@,Duality.Quaternion@)">
            <summary>
            Flips the sign of the all the quaternion components.
            </summary>
            <param name="quaternion">Source <see cref="T:Duality.Quaternion"/>.</param>
            <param name="result">The result of the quaternion negation as an output parameter.</param>
        </member>
        <member name="M:Duality.Quaternion.Normalize">
            <summary>
            Scales the quaternion magnitude to unit length.
            </summary>
        </member>
        <member name="M:Duality.Quaternion.Normalize(Duality.Quaternion)">
            <summary>
            Scales the quaternion magnitude to unit length.
            </summary>
            <param name="quaternion">Source <see cref="T:Duality.Quaternion"/>.</param>
            <returns>The unit length quaternion.</returns>
        </member>
        <member name="M:Duality.Quaternion.Normalize(Duality.Quaternion@,Duality.Quaternion@)">
            <summary>
            Scales the quaternion magnitude to unit length.
            </summary>
            <param name="quaternion">Source <see cref="T:Duality.Quaternion"/>.</param>
            <param name="result">The unit length quaternion an output parameter.</param>
        </member>
        <member name="M:Duality.Quaternion.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this <see cref="T:Duality.Quaternion"/> in the format:
            {X:[<see cref="F:Duality.Quaternion.X"/>] Y:[<see cref="F:Duality.Quaternion.Y"/>] Z:[<see cref="F:Duality.Quaternion.Z"/>] W:[<see cref="F:Duality.Quaternion.W"/>]}
            </summary>
            <returns>A <see cref="T:System.String"/> representation of this <see cref="T:Duality.Quaternion"/>.</returns>
        </member>
        <member name="M:Duality.Quaternion.ToVector4">
            <summary>
            Gets a <see cref="T:Duality.Vector4"/> representation for this object.
            </summary>
            <returns>A <see cref="T:Duality.Vector4"/> representation for this object.</returns>
        </member>
        <member name="M:Duality.Quaternion.op_Addition(Duality.Quaternion,Duality.Quaternion)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="quaternion1">Source <see cref="T:Duality.Quaternion"/> on the left of the add sign.</param>
            <param name="quaternion2">Source <see cref="T:Duality.Quaternion"/> on the right of the add sign.</param>
            <returns>Sum of the vectors.</returns>
        </member>
        <member name="M:Duality.Quaternion.op_Division(Duality.Quaternion,Duality.Quaternion)">
            <summary>
            Divides a <see cref="T:Duality.Quaternion"/> by the other <see cref="T:Duality.Quaternion"/>.
            </summary>
            <param name="quaternion1">Source <see cref="T:Duality.Quaternion"/> on the left of the div sign.</param>
            <param name="quaternion2">Divisor <see cref="T:Duality.Quaternion"/> on the right of the div sign.</param>
            <returns>The result of dividing the quaternions.</returns>
        </member>
        <member name="M:Duality.Quaternion.op_Equality(Duality.Quaternion,Duality.Quaternion)">
            <summary>
            Compares whether two <see cref="T:Duality.Quaternion"/> instances are equal.
            </summary>
            <param name="quaternion1"><see cref="T:Duality.Quaternion"/> instance on the left of the equal sign.</param>
            <param name="quaternion2"><see cref="T:Duality.Quaternion"/> instance on the right of the equal sign.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Duality.Quaternion.op_Inequality(Duality.Quaternion,Duality.Quaternion)">
            <summary>
            Compares whether two <see cref="T:Duality.Quaternion"/> instances are not equal.
            </summary>
            <param name="quaternion1"><see cref="T:Duality.Quaternion"/> instance on the left of the not equal sign.</param>
            <param name="quaternion2"><see cref="T:Duality.Quaternion"/> instance on the right of the not equal sign.</param>
            <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Duality.Quaternion.op_Multiply(Duality.Quaternion,Duality.Quaternion)">
            <summary>
            Multiplies two quaternions.
            </summary>
            <param name="quaternion1">Source <see cref="T:Duality.Quaternion"/> on the left of the mul sign.</param>
            <param name="quaternion2">Source <see cref="T:Duality.Quaternion"/> on the right of the mul sign.</param>
            <returns>Result of the quaternions multiplication.</returns>
        </member>
        <member name="M:Duality.Quaternion.op_Multiply(Duality.Quaternion,System.Double)">
            <summary>
            Multiplies the components of quaternion by a scalar.
            </summary>
            <param name="quaternion1">Source <see cref="T:Duality.Vector3"/> on the left of the mul sign.</param>
            <param name="scaleFactor">Scalar value on the right of the mul sign.</param>
            <returns>Result of the quaternion multiplication with a scalar.</returns>
        </member>
        <member name="M:Duality.Quaternion.op_Subtraction(Duality.Quaternion,Duality.Quaternion)">
            <summary>
            Subtracts a <see cref="T:Duality.Quaternion"/> from a <see cref="T:Duality.Quaternion"/>.
            </summary>
            <param name="quaternion1">Source <see cref="T:Duality.Vector3"/> on the left of the sub sign.</param>
            <param name="quaternion2">Source <see cref="T:Duality.Vector3"/> on the right of the sub sign.</param>
            <returns>Result of the quaternion subtraction.</returns>
        </member>
        <member name="M:Duality.Quaternion.op_UnaryNegation(Duality.Quaternion)">
            <summary>
            Flips the sign of the all the quaternion components.
            </summary>
            <param name="quaternion">Source <see cref="T:Duality.Quaternion"/> on the right of the sub sign.</param>
            <returns>The result of the quaternion negation.</returns>
        </member>
        <member name="T:Duality.Rect">
            <summary>
            Describes a rectangular area.
            </summary>
        </member>
        <member name="F:Duality.Rect.Empty">
            <summary>
            An empty Rect.
            </summary>
        </member>
        <member name="F:Duality.Rect.X">
            <summary>
            The Rects x-Coordinate.
            </summary>
        </member>
        <member name="F:Duality.Rect.Y">
            <summary>
            The Rects y-Coordinate.
            </summary>
        </member>
        <member name="F:Duality.Rect.W">
            <summary>
            The Rects width.
            </summary>
        </member>
        <member name="F:Duality.Rect.H">
            <summary>
            The Rects height.
            </summary>
        </member>
        <member name="P:Duality.Rect.Pos">
            <summary>
            [GET / SET] The Rects position
            </summary>
        </member>
        <member name="P:Duality.Rect.Size">
            <summary>
            [GET / SET] The Rects size.
            </summary>
        </member>
        <member name="P:Duality.Rect.LeftX">
            <summary>
            [GET] The minimum x-Coordinate occupied by the Rect. Accounts for negative sizes.
            </summary>
        </member>
        <member name="P:Duality.Rect.TopY">
            <summary>
            [GET] The minimum y-Coordinate occupied by the Rect. Accounts for negative sizes.
            </summary>
        </member>
        <member name="P:Duality.Rect.BottomY">
            <summary>
            [GET] The maximum y-Coordinate occupied by the Rect. Accounts for negative sizes.
            </summary>
        </member>
        <member name="P:Duality.Rect.RightX">
            <summary>
            [GET] The maximum x-Coordinate occupied by the Rect. Accounts for negative sizes.
            </summary>
        </member>
        <member name="P:Duality.Rect.CenterX">
            <summary>
            [GET] The center x-Coordinate occupied by the Rect.
            </summary>
        </member>
        <member name="P:Duality.Rect.CenterY">
            <summary>
            [GET] The center y-Coordinate occupied by the Rect.
            </summary>
        </member>
        <member name="P:Duality.Rect.TopLeft">
            <summary>
            [GET] The Rects top left coordinates
            </summary>
        </member>
        <member name="P:Duality.Rect.TopRight">
            <summary>
            [GET] The Rects top right coordinates
            </summary>
        </member>
        <member name="P:Duality.Rect.BottomLeft">
            <summary>
            [GET] The Rects bottom left coordinates
            </summary>
        </member>
        <member name="P:Duality.Rect.BottomRight">
            <summary>
            [GET] The Rects bottom right coordinates
            </summary>
        </member>
        <member name="P:Duality.Rect.Center">
            <summary>
            [GET] The Rects center coordinates
            </summary>
        </member>
        <member name="P:Duality.Rect.Top">
            <summary>
            [GET] The middle of the top edge of the Rect.
            </summary>
        </member>
        <member name="P:Duality.Rect.Bottom">
            <summary>
            [GET] The middle of the bottom edge of the Rect.
            </summary>
        </member>
        <member name="P:Duality.Rect.Left">
            <summary>
            [GET] The middle of the left edge of the Rect.
            </summary>
        </member>
        <member name="P:Duality.Rect.Right">
            <summary>
            [GET] The middle of the right edge of the Rect.
            </summary>
        </member>
        <member name="P:Duality.Rect.BoundingRadius">
            <summary>
            [GET] If this Rect was to fit inside a bounding circle originating from [0,0],
            this would be its radius.
            </summary>
        </member>
        <member name="M:Duality.Rect.#ctor(Duality.Vector2)">
            <summary>
            Creates a Rect of the given size.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Duality.Rect.#ctor(System.Double,System.Double)">
            <summary>
            Creates a Rect of the given size.
            </summary>
            <param name="w"></param>
            <param name="h"></param>
        </member>
        <member name="M:Duality.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a Rect of the given size and position.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
        </member>
        <member name="M:Duality.Rect.WithOffset(System.Double,System.Double)">
            <summary>
            Returns a new version of this Rect that has been moved by the specified offset.
            </summary>
            <param name="x">Movement in x-Direction.</param>
            <param name="y">Movement in y-Direction.</param>
            <returns>A new Rect with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Rect.WithOffset(Duality.Vector2)">
            <summary>
            Returns a new version of this Rect that has been moved by the specified offset.
            </summary>
            <param name="offset">Movement vector.</param>
            <returns>A new Rect with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Rect.Scaled(System.Double,System.Double)">
            <summary>
            Returns a new version of this Rect that has been scaled by the specified factor.
            Scaling only affects a Rects size, not its position.
            </summary>
            <param name="x">x-Scale factor.</param>
            <param name="y">y-Scale factor.</param>
            <returns>A new Rect with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Rect.Scaled(Duality.Vector2)">
            <summary>
            Returns a new version of this Rect that has been scaled by the specified factor.
            Scaling only affects a Rects size, not its position.
            </summary>
            <param name="factor">Scale factor.</param>
            <returns>A new Rect with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Rect.Transformed(System.Double,System.Double)">
            <summary>
            Returns a new version of this Rect that has been transformed by the specified scale factor.
            Transforming both affects a Rects size and position.
            </summary>
            <param name="x">x-Scale factor.</param>
            <param name="y">y-Scale factor.</param>
            <returns>A new Rect with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Rect.Transformed(Duality.Vector2)">
            <summary>
            Returns a new version of this Rect that has been transformed by the specified scale factor.
            Transforming both affects a Rects size and position.
            </summary>
            <param name="scale">Scale factor.</param>
            <returns>A new Rect with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Rect.ExpandedToContain(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns a new version of this Rect that has been expanded to contain
            the specified rectangular area.
            </summary>
            <param name="x">x-Coordinate of the Rect to contain.</param>
            <param name="y">y-Coordinate of the Rect to contain.</param>
            <param name="w">Width of the Rect to contain.</param>
            <param name="h">Height of the Rect to contain.</param>
            <returns>A new Rect with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Rect.ExpandedToContain(Duality.Rect)">
            <summary>
            Returns a new version of this Rect that has been expanded to contain
            the specified Rect.
            </summary>
            <param name="other">The Rect to contain.</param>
            <returns>A new Rect with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Rect.ExpandedToContain(System.Double,System.Double)">
            <summary>
            Returns a new version of this Rect that has been expanded to contain
            the specified point.
            </summary>
            <param name="x">x-Coordinate of the point to contain.</param>
            <param name="y">y-Coordinate of the point to contain.</param>
            <returns>A new Rect with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Rect.ExpandedToContain(Duality.Vector2)">
            <summary>
            Returns a new version of this Rect that has been expanded to contain
            the specified point.
            </summary>
            <param name="p">The point to contain.</param>
            <returns>A new Rect with the specified adjustments.</returns>
        </member>
        <member name="M:Duality.Rect.Normalized">
            <summary>
            Returns a normalized version of the rect, i.e. one with a positive width and height.
            </summary>
        </member>
        <member name="M:Duality.Rect.Contains(System.Double,System.Double)">
            <summary>
            Returns whether this Rect contains a given point.
            </summary>
            <param name="x">x-Coordinate of the point to test.</param>
            <param name="y">y-Coordinate of the point to test.</param>
            <returns>True, if the Rect contains the point, false if not.</returns>
        </member>
        <member name="M:Duality.Rect.Contains(Duality.Vector2)">
            <summary>
            Returns whether this Rect contains a given point.
            </summary>
            <param name="pos">The point to test.</param>
            <returns>True, if the Rect contains the point, false if not.</returns>
        </member>
        <member name="M:Duality.Rect.Contains(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns whether this Rect contains a given rectangular area.
            </summary>
            <param name="x">x-Coordinate of the Rect to test.</param>
            <param name="y">y-Coordinate of the Rect to test.</param>
            <param name="w">Width of the Rect to test.</param>
            <param name="h">Height of the Rect to test.</param>
            <returns>True, if the Rect contains the other Rect, false if not.</returns>
        </member>
        <member name="M:Duality.Rect.Contains(Duality.Rect)">
            <summary>
            Returns whether this Rect contains a given rectangular area.
            </summary>
            <param name="rect">The Rect to test.</param>
            <returns>True, if the Rect contains the other Rect, false if not.</returns>
        </member>
        <member name="M:Duality.Rect.Intersects(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns whether this Rect intersects a given rectangular area.
            </summary>
            <param name="x">x-Coordinate of the Rect to test.</param>
            <param name="y">y-Coordinate of the Rect to test.</param>
            <param name="w">Width of the Rect to test.</param>
            <param name="h">Height of the Rect to test.</param>
            <returns>True, if the Rect intersects the other Rect, false if not.</returns>
        </member>
        <member name="M:Duality.Rect.Intersects(Duality.Rect)">
            <summary>
            Returns whether this Rect intersects a given rectangular area.
            </summary>
            <param name="rect">The Rect to test.</param>
            <returns>True, if the Rect intersects the other Rect, false if not.</returns>
        </member>
        <member name="M:Duality.Rect.Intersection(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns a Rect that equals this Rects intersection with another Rect.
            </summary>
            <param name="x">x-Coordinate of the Rect to intersect with.</param>
            <param name="y">y-Coordinate of the Rect to intersect with.</param>
            <param name="w">Width of the Rect to intersect with.</param>
            <param name="h">Height of the Rect to intersect with.</param>
            <returns>A new Rect that describes both Rects intersection area. <see cref="F:Duality.Rect.Empty"/>, if there is no intersection.</returns>
        </member>
        <member name="M:Duality.Rect.Intersection(Duality.Rect)">
            <summary>
            Returns a Rect that equals this Rects intersection with another Rect.
            </summary>
            <param name="rect">The other Rect to intersect with.</param>
            <returns>A new Rect that describes both Rects intersection area. <see cref="F:Duality.Rect.Empty"/>, if there is no intersection.</returns>
        </member>
        <member name="M:Duality.Rect.Equals(Duality.Rect)">
            <summary>
            Tests if two Rects are equal.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Duality.Rect.Align(Duality.Alignment,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a Rect using x and y Coordinates that are assumed to be aligned as specified.
            </summary>
            <param name="align">The alignment of the Rects x and y Coordinates.</param>
            <param name="x">The Rects x-Coordinate.</param>
            <param name="y">The Rects y-Coordinate.</param>
            <param name="w">The Rects width.</param>
            <param name="h">The Rects height.</param>
        </member>
        <member name="M:Duality.Rect.op_Equality(Duality.Rect,Duality.Rect)">
            <summary>
            Returns whether two Rects are equal.
            </summary>
            <param name="left">The first Rect.</param>
            <param name="right">The second Rect.</param>
        </member>
        <member name="M:Duality.Rect.op_Inequality(Duality.Rect,Duality.Rect)">
            <summary>
            Returns whether two Rects are unequal.
            </summary>
            <param name="left">The first Rect.</param>
            <param name="right">The second Rect.</param>
        </member>
        <member name="T:Duality.Vector2">
            <summary>
            Represents a 2D vector using two single-precision floating-point numbers.
            </summary>
        </member>
        <member name="F:Duality.Vector2.UnitX">
            <summary>
            Defines a unit-length Vector2 that points along the X-axis.
            </summary>
        </member>
        <member name="F:Duality.Vector2.UnitY">
            <summary>
            Defines a unit-length Vector2 that points along the Y-axis.
            </summary>
        </member>
        <member name="F:Duality.Vector2.Zero">
            <summary>
            Defines a zero-length Vector2.
            </summary>
        </member>
        <member name="F:Duality.Vector2.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
        </member>
        <member name="F:Duality.Vector2.X">
            <summary>
            The X component of the Vector2.
            </summary>
        </member>
        <member name="F:Duality.Vector2.Y">
            <summary>
            The Y component of the Vector2.
            </summary>
        </member>
        <member name="M:Duality.Vector2.#ctor(System.Double)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="value">The value that will initialize this instance.</param>
        </member>
        <member name="M:Duality.Vector2.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a new Vector2.
            </summary>
            <param name="x">The x coordinate of the net Vector2.</param>
            <param name="y">The y coordinate of the net Vector2.</param>
        </member>
        <member name="M:Duality.Vector2.FromAngleLength(System.Double,System.Double)">
            <summary>
            Constructs a new vector from angle and length.
            </summary>
            <param name="angle"></param>
            <param name="length"></param>
        </member>
        <member name="P:Duality.Vector2.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <seealso cref="P:Duality.Vector2.LengthSquared"/>
        </member>
        <member name="P:Duality.Vector2.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:Duality.Vector2.Length"/>
        </member>
        <member name="P:Duality.Vector2.Angle">
            <summary>
            Returns the vectors angle
            </summary>
        </member>
        <member name="P:Duality.Vector2.PerpendicularRight">
            <summary>
            Gets the perpendicular vector on the right side of this vector.
            </summary>
        </member>
        <member name="P:Duality.Vector2.PerpendicularLeft">
            <summary>
            Gets the perpendicular vector on the left side of this vector.
            </summary>
        </member>
        <member name="P:Duality.Vector2.Normalized">
            <summary>
            Returns a normalized version of this vector.
            </summary>
        </member>
        <member name="P:Duality.Vector2.Item(System.Int32)">
            <summary>
            Gets or sets the value at the index of the Vector.
            </summary>
        </member>
        <member name="M:Duality.Vector2.Normalize">
            <summary>
            Scales the Vector2 to unit length.
            </summary>
        </member>
        <member name="M:Duality.Vector2.Add(Duality.Vector2@,Duality.Vector2@,Duality.Vector2@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <param name="result">Result of operation.</param>
        </member>
        <member name="M:Duality.Vector2.Subtract(Duality.Vector2@,Duality.Vector2@,Duality.Vector2@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:Duality.Vector2.Multiply(Duality.Vector2@,System.Double,Duality.Vector2@)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:Duality.Vector2.Multiply(Duality.Vector2@,Duality.Vector2@,Duality.Vector2@)">
            <summary>
            Multiplies a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:Duality.Vector2.Divide(Duality.Vector2@,System.Double,Duality.Vector2@)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:Duality.Vector2.Divide(Duality.Vector2@,Duality.Vector2@,Duality.Vector2@)">
            <summary>
            Divide a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:Duality.Vector2.Min(Duality.Vector2,Duality.Vector2)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:Duality.Vector2.Min(Duality.Vector2@,Duality.Vector2@,Duality.Vector2@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:Duality.Vector2.Max(Duality.Vector2,Duality.Vector2)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:Duality.Vector2.Max(Duality.Vector2@,Duality.Vector2@,Duality.Vector2@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:Duality.Vector2.Dot(Duality.Vector2,Duality.Vector2)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:Duality.Vector2.Dot(Duality.Vector2@,Duality.Vector2@,System.Double@)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:Duality.Vector2.Lerp(Duality.Vector2,Duality.Vector2,System.Double)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:Duality.Vector2.Lerp(Duality.Vector2@,Duality.Vector2@,System.Double,Duality.Vector2@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:Duality.Vector2.AngleBetween(Duality.Vector2,Duality.Vector2)">
            <summary>
            Calculates the angle (in radians) between two vectors.
            </summary>
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <returns>Angle (in radians) between the vectors.</returns>
            <remarks>Note that the returned angle is never bigger than the constant Pi.</remarks>
        </member>
        <member name="M:Duality.Vector2.AngleBetween(Duality.Vector2@,Duality.Vector2@,System.Double@)">
            <summary>
            Calculates the angle (in radians) between two vectors.
            </summary>
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <param name="result">Angle (in radians) between the vectors.</param>
            <remarks>Note that the returned angle is never bigger than the constant Pi.</remarks>
        </member>
        <member name="M:Duality.Vector2.Transform(Duality.Vector2,Duality.Quaternion)">
            <summary>
            Transforms a vector by a quaternion rotation.
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="quat">The quaternion to rotate the vector by.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Duality.Vector2.Transform(Duality.Vector2@,Duality.Quaternion@,Duality.Vector2@)">
            <summary>
            Transforms a vector by a quaternion rotation.
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="quat">The quaternion to rotate the vector by.</param>
            <param name="result">The result of the operation.</param>
        </member>
        <member name="M:Duality.Vector2.Transform(Duality.Vector2,Duality.Matrix4)">
            <summary>
            Transforms the vector
            </summary>
            <param name="vec"></param>
            <param name="mat"></param>
        </member>
        <member name="M:Duality.Vector2.Transform(Duality.Vector2@,Duality.Matrix4@,Duality.Vector2@)">
            <summary>
            Transforms the vector
            </summary>
            <param name="vec"></param>
            <param name="mat"></param>
            <param name="result"></param>
        </member>
        <member name="M:Duality.Vector2.op_Addition(Duality.Vector2,Duality.Vector2)">
            <summary>
            Adds the specified instances.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>Result of addition.</returns>
        </member>
        <member name="M:Duality.Vector2.op_Subtraction(Duality.Vector2,Duality.Vector2)">
            <summary>
            Subtracts the specified instances.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>Result of subtraction.</returns>
        </member>
        <member name="M:Duality.Vector2.op_UnaryNegation(Duality.Vector2)">
            <summary>
            Negates the specified instance.
            </summary>
            <param name="vec">Operand.</param>
            <returns>Result of negation.</returns>
        </member>
        <member name="M:Duality.Vector2.op_Multiply(Duality.Vector2,System.Double)">
            <summary>
            Multiplies the specified instance by a scalar.
            </summary>
            <param name="vec">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of multiplication.</returns>
        </member>
        <member name="M:Duality.Vector2.op_Multiply(System.Double,Duality.Vector2)">
            <summary>
            Multiplies the specified instance by a scalar.
            </summary>
            <param name="scale">Left operand.</param>
            <param name="vec">Right operand.</param>
            <returns>Result of multiplication.</returns>
        </member>
        <member name="M:Duality.Vector2.op_Multiply(Duality.Vector2,Duality.Vector2)">
            <summary>
            Scales the specified instance by a vector.
            </summary>
            <param name="vec">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of multiplication.</returns>
        </member>
        <member name="M:Duality.Vector2.op_Division(Duality.Vector2,System.Double)">
            <summary>
            Divides the specified instance by a scalar.
            </summary>
            <param name="vec">Left operand</param>
            <param name="scale">Right operand</param>
            <returns>Result of the division.</returns>
        </member>
        <member name="M:Duality.Vector2.op_Division(Duality.Vector2,Duality.Vector2)">
            <summary>
            Divides the specified instance by a vector.
            </summary>
            <param name="vec">Left operand</param>
            <param name="scale">Right operand</param>
            <returns>Result of the division.</returns>
        </member>
        <member name="M:Duality.Vector2.op_Equality(Duality.Vector2,Duality.Vector2)">
            <summary>
            Compares the specified instances for equality.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>True if both instances are equal; false otherwise.</returns>
        </member>
        <member name="M:Duality.Vector2.op_Inequality(Duality.Vector2,Duality.Vector2)">
            <summary>
            Compares the specified instances for inequality.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>True if both instances are not equal; false otherwise.</returns>
        </member>
        <member name="M:Duality.Vector2.ToString">
            <summary>
            Returns a System.String that represents the current Vector2.
            </summary>
        </member>
        <member name="M:Duality.Vector2.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:Duality.Vector2.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:Duality.Vector2.Equals(Duality.Vector2)">
            <summary>
            Indicates whether the current vector is equal to another vector.
            </summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="T:Duality.Vector2Int">
            <summary>
            Represents a 2D vector using two single-precision floating-point numbers.
            </summary>
        </member>
        <member name="F:Duality.Vector2Int.UnitX">
            <summary>
            Defines a unit-length Vector2Int that points along the X-axis.
            </summary>
        </member>
        <member name="F:Duality.Vector2Int.UnitY">
            <summary>
            Defines a unit-length Vector2Int that points along the Y-axis.
            </summary>
        </member>
        <member name="F:Duality.Vector2Int.Zero">
            <summary>
            Defines a zero-length Vector2Int.
            </summary>
        </member>
        <member name="F:Duality.Vector2Int.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
        </member>
        <member name="F:Duality.Vector2Int.X">
            <summary>
            The X component of the Vector2Int.
            </summary>
        </member>
        <member name="F:Duality.Vector2Int.Y">
            <summary>
            The Y component of the Vector2Int.
            </summary>
        </member>
        <member name="M:Duality.Vector2Int.#ctor(System.Int32)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="value">The value that will initialize this instance.</param>
        </member>
        <member name="M:Duality.Vector2Int.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new Vector2.
            </summary>
            <param name="x">The x coordinate of the net Vector2Int.</param>
            <param name="y">The y coordinate of the net Vector2Int.</param>
        </member>
        <member name="M:Duality.Vector2Int.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a new Vector2.
            </summary>
            <param name="x">The x coordinate of the net Vector2Int (Will be casted to Int).</param>
            <param name="y">The y coordinate of the net Vector2Int (Will be casted to Int).</param>
        </member>
        <member name="M:Duality.Vector2Int.FromAngleLength(System.Int32,System.Int32)">
            <summary>
            Constructs a new vector from angle and length.
            </summary>
            <param name="angle"></param>
            <param name="length"></param>
        </member>
        <member name="P:Duality.Vector2Int.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <seealso cref="P:Duality.Vector2Int.LengthSquared"/>
        </member>
        <member name="P:Duality.Vector2Int.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:Duality.Vector2Int.Length"/>
        </member>
        <member name="P:Duality.Vector2Int.Item(System.Int32)">
            <summary>
            Gets or sets the value at the index of the Vector.
            </summary>
        </member>
        <member name="M:Duality.Vector2Int.Add(Duality.Vector2Int@,Duality.Vector2Int@,Duality.Vector2Int@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <param name="result">Result of operation.</param>
        </member>
        <member name="M:Duality.Vector2Int.Subtract(Duality.Vector2Int@,Duality.Vector2Int@,Duality.Vector2Int@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:Duality.Vector2Int.Multiply(Duality.Vector2Int@,System.Int32,Duality.Vector2Int@)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:Duality.Vector2Int.Multiply(Duality.Vector2Int@,Duality.Vector2Int@,Duality.Vector2Int@)">
            <summary>
            Multiplies a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:Duality.Vector2Int.Divide(Duality.Vector2Int@,Duality.Vector2Int@,Duality.Vector2Int@)">
            <summary>
            Divide a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:Duality.Vector2Int.Min(Duality.Vector2Int,Duality.Vector2Int)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:Duality.Vector2Int.Min(Duality.Vector2Int@,Duality.Vector2Int@,Duality.Vector2Int@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:Duality.Vector2Int.Max(Duality.Vector2Int,Duality.Vector2Int)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:Duality.Vector2Int.Max(Duality.Vector2Int@,Duality.Vector2Int@,Duality.Vector2Int@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:Duality.Vector2Int.Dot(Duality.Vector2Int,Duality.Vector2Int)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:Duality.Vector2Int.Dot(Duality.Vector2Int@,Duality.Vector2Int@,System.Double@)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:Duality.Vector2Int.Lerp(Duality.Vector2Int,Duality.Vector2Int,System.Int32)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:Duality.Vector2Int.Lerp(Duality.Vector2Int@,Duality.Vector2Int@,System.Int32,Duality.Vector2Int@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:Duality.Vector2Int.op_Addition(Duality.Vector2Int,Duality.Vector2Int)">
            <summary>
            Adds the specified instances.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>Result of addition.</returns>
        </member>
        <member name="M:Duality.Vector2Int.op_Subtraction(Duality.Vector2Int,Duality.Vector2Int)">
            <summary>
            Subtracts the specified instances.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>Result of subtraction.</returns>
        </member>
        <member name="M:Duality.Vector2Int.op_UnaryNegation(Duality.Vector2Int)">
            <summary>
            Negates the specified instance.
            </summary>
            <param name="vec">Operand.</param>
            <returns>Result of negation.</returns>
        </member>
        <member name="M:Duality.Vector2Int.op_Multiply(Duality.Vector2Int,System.Double)">
            <summary>
            Multiplies the specified instance by a scalar.
            </summary>
            <param name="vec">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of multiplication.</returns>
        </member>
        <member name="M:Duality.Vector2Int.op_Multiply(System.Double,Duality.Vector2Int)">
            <summary>
            Multiplies the specified instance by a scalar.
            </summary>
            <param name="scale">Left operand.</param>
            <param name="vec">Right operand.</param>
            <returns>Result of multiplication.</returns>
        </member>
        <member name="M:Duality.Vector2Int.op_Multiply(Duality.Vector2Int,Duality.Vector2Int)">
            <summary>
            Scales the specified instance by a vector.
            </summary>
            <param name="vec">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of multiplication.</returns>
        </member>
        <member name="M:Duality.Vector2Int.op_Division(Duality.Vector2Int,System.Double)">
            <summary>
            Divides the specified instance by a scalar.
            </summary>
            <param name="vec">Left operand</param>
            <param name="scale">Right operand</param>
            <returns>Result of the division.</returns>
        </member>
        <member name="M:Duality.Vector2Int.op_Division(Duality.Vector2Int,Duality.Vector2Int)">
            <summary>
            Divides the specified instance by a vector.
            </summary>
            <param name="vec">Left operand</param>
            <param name="scale">Right operand</param>
            <returns>Result of the division.</returns>
        </member>
        <member name="M:Duality.Vector2Int.op_Equality(Duality.Vector2Int,Duality.Vector2Int)">
            <summary>
            Compares the specified instances for equality.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>True if both instances are equal; false otherwise.</returns>
        </member>
        <member name="M:Duality.Vector2Int.op_Inequality(Duality.Vector2Int,Duality.Vector2Int)">
            <summary>
            Compares the specified instances for inequality.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>True if both instances are not equal; false otherwise.</returns>
        </member>
        <member name="M:Duality.Vector2Int.ToString">
            <summary>
            Returns a System.String that represents the current Vector2.
            </summary>
        </member>
        <member name="M:Duality.Vector2Int.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:Duality.Vector2Int.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:Duality.Vector2Int.Equals(Duality.Vector2Int)">
            <summary>
            Indicates whether the current vector is equal to another vector.
            </summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="T:Duality.Vector3">
            <summary>
            Represents a 3D vector using three single-precision floating-point numbers.
            </summary>
        </member>
        <member name="F:Duality.Vector3.X">
            <summary>
            The x coordinate of this <see cref="T:Duality.Vector3"/>.
            </summary>
        </member>
        <member name="F:Duality.Vector3.Y">
            <summary>
            The y coordinate of this <see cref="T:Duality.Vector3"/>.
            </summary>
        </member>
        <member name="F:Duality.Vector3.Z">
            <summary>
            The z coordinate of this <see cref="T:Duality.Vector3"/>.
            </summary>
        </member>
        <member name="P:Duality.Vector3.Zero">
            <summary>
            Returns a <see cref="T:Duality.Vector3"/> with components 0, 0, 0.
            </summary>
        </member>
        <member name="P:Duality.Vector3.One">
            <summary>
            Returns a <see cref="T:Duality.Vector3"/> with components 1, 1, 1.
            </summary>
        </member>
        <member name="P:Duality.Vector3.UnitX">
            <summary>
            Returns a <see cref="T:Duality.Vector3"/> with components 1, 0, 0.
            </summary>
        </member>
        <member name="P:Duality.Vector3.UnitY">
            <summary>
            Returns a <see cref="T:Duality.Vector3"/> with components 0, 1, 0.
            </summary>
        </member>
        <member name="P:Duality.Vector3.UnitZ">
            <summary>
            Returns a <see cref="T:Duality.Vector3"/> with components 0, 0, 1.
            </summary>
        </member>
        <member name="P:Duality.Vector3.Up">
            <summary>
            Returns a <see cref="T:Duality.Vector3"/> with components 0, 1, 0.
            </summary>
        </member>
        <member name="P:Duality.Vector3.Down">
            <summary>
            Returns a <see cref="T:Duality.Vector3"/> with components 0, -1, 0.
            </summary>
        </member>
        <member name="P:Duality.Vector3.Right">
            <summary>
            Returns a <see cref="T:Duality.Vector3"/> with components 1, 0, 0.
            </summary>
        </member>
        <member name="P:Duality.Vector3.Left">
            <summary>
            Returns a <see cref="T:Duality.Vector3"/> with components -1, 0, 0.
            </summary>
        </member>
        <member name="P:Duality.Vector3.Forward">
            <summary>
            Returns a <see cref="T:Duality.Vector3"/> with components 0, 0, -1.
            </summary>
        </member>
        <member name="P:Duality.Vector3.Backward">
            <summary>
            Returns a <see cref="T:Duality.Vector3"/> with components 0, 0, 1.
            </summary>
        </member>
        <member name="P:Duality.Vector3.MaxValue">
            <summary>
            Returns a <see cref="T:Duality.Vector3"/> with components double.MaxValue.
            </summary>
        </member>
        <member name="P:Duality.Vector3.Length">
            <summary>
            Returns the length of this <see cref="T:Duality.Vector3"/>.
            </summary>
            <returns>The length of this <see cref="T:Duality.Vector3"/>.</returns>
        </member>
        <member name="P:Duality.Vector3.LengthSquared">
            <summary>
            Returns the squared length of this <see cref="T:Duality.Vector3"/>.
            </summary>
            <returns>The squared length of this <see cref="T:Duality.Vector3"/>.</returns>
        </member>
        <member name="P:Duality.Vector3.Normalized">
            <summary>
            Returns the normalized version of this <see cref="T:Duality.Vector3"/>.
            </summary>
            <returns>The normalized version of this <see cref="T:Duality.Vector3"/>.</returns>
        </member>
        <member name="P:Duality.Vector3.Xy">
            <summary>
            Gets or sets an <see cref="T:Duality.Vector2"/> with the X and Y components of this instance.
            </summary>
        </member>
        <member name="M:Duality.Vector3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a 3d vector with X, Y and Z from three values.
            </summary>
            <param name="x">The x coordinate in 3d-space.</param>
            <param name="y">The y coordinate in 3d-space.</param>
            <param name="z">The z coordinate in 3d-space.</param>
        </member>
        <member name="M:Duality.Vector3.#ctor(System.Double)">
            <summary>
            Constructs a 3d vector with X, Y and Z set to the same value.
            </summary>
            <param name="value">The x, y and z coordinates in 3d-space.</param>
        </member>
        <member name="M:Duality.Vector3.#ctor(Duality.Vector2,System.Double)">
            <summary>
            Constructs a 3d vector with X, Y from <see cref="T:Duality.Vector2"/> and Z from a scalar.
            </summary>
            <param name="value">The x and y coordinates in 3d-space.</param>
            <param name="z">The z coordinate in 3d-space.</param>
        </member>
        <member name="M:Duality.Vector3.#ctor(Duality.Vector2)">
            <summary>
            Constructs a 3d vector with X, Y from <see cref="T:Duality.Vector2"/>.
            </summary>
            <param name="value">The x and y coordinates in 3d-space.</param>
        </member>
        <member name="P:Duality.Vector3.Item(System.Int32)">
            <summary>
            Gets or sets the value at the index of the Vector.
            </summary>
        </member>
        <member name="M:Duality.Vector3.AngleBetween(Duality.Vector3,Duality.Vector3)">
            <summary>
            Calculates the angle (in radians) between two vectors.
            </summary>
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <returns>Angle (in radians) between the vectors.</returns>
            <remarks>Note that the returned angle is never bigger than the constant Pi.</remarks>
        </member>
        <member name="M:Duality.Vector3.AngleBetween(Duality.Vector3@,Duality.Vector3@,System.Double@)">
            <summary>
            Calculates the angle (in radians) between two vectors.
            </summary>
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <param name="result">Angle (in radians) between the vectors.</param>
            <remarks>Note that the returned angle is never bigger than the constant Pi.</remarks>
        </member>
        <member name="M:Duality.Vector3.Add(Duality.Vector3,Duality.Vector3)">
            <summary>
            Performs vector addition on <paramref name="value1"/> and <paramref name="value2"/>.
            </summary>
            <param name="value1">The first vector to add.</param>
            <param name="value2">The second vector to add.</param>
            <returns>The result of the vector addition.</returns>
        </member>
        <member name="M:Duality.Vector3.Add(Duality.Vector3@,Duality.Vector3@,Duality.Vector3@)">
            <summary>
            Performs vector addition on <paramref name="value1"/> and
            <paramref name="value2"/>, storing the result of the
            addition in <paramref name="result"/>.
            </summary>
            <param name="value1">The first vector to add.</param>
            <param name="value2">The second vector to add.</param>
            <param name="result">The result of the vector addition.</param>
        </member>
        <member name="M:Duality.Vector3.Ceiling">
            <summary>
            Round the members of this <see cref="T:Duality.Vector3"/> towards positive infinity.
            </summary>
        </member>
        <member name="M:Duality.Vector3.Ceiling(Duality.Vector3)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains members from another vector rounded towards positive infinity.
            </summary>
            <param name="value">Source <see cref="T:Duality.Vector3"/>.</param>
            <returns>The rounded <see cref="T:Duality.Vector3"/>.</returns>
        </member>
        <member name="M:Duality.Vector3.Ceiling(Duality.Vector3@,Duality.Vector3@)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains members from another vector rounded towards positive infinity.
            </summary>
            <param name="value">Source <see cref="T:Duality.Vector3"/>.</param>
            <param name="result">The rounded <see cref="T:Duality.Vector3"/>.</param>
        </member>
        <member name="M:Duality.Vector3.Clamp(Duality.Vector3,Duality.Vector3,Duality.Vector3)">
            <summary>
            Clamps the specified value within a range.
            </summary>
            <param name="value1">The value to clamp.</param>
            <param name="min">The min value.</param>
            <param name="max">The max value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Duality.Vector3.Clamp(Duality.Vector3@,Duality.Vector3@,Duality.Vector3@,Duality.Vector3@)">
            <summary>
            Clamps the specified value within a range.
            </summary>
            <param name="value1">The value to clamp.</param>
            <param name="min">The min value.</param>
            <param name="max">The max value.</param>
            <param name="result">The clamped value as an output parameter.</param>
        </member>
        <member name="M:Duality.Vector3.Cross(Duality.Vector3,Duality.Vector3)">
            <summary>
            Computes the cross product of two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The cross product of two vectors.</returns>
        </member>
        <member name="M:Duality.Vector3.Cross(Duality.Vector3@,Duality.Vector3@,Duality.Vector3@)">
            <summary>
            Computes the cross product of two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <param name="result">The cross product of two vectors as an output parameter.</param>
        </member>
        <member name="M:Duality.Vector3.Distance(Duality.Vector3,Duality.Vector3)">
            <summary>
            Returns the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between two vectors.</returns>
        </member>
        <member name="M:Duality.Vector3.Distance(Duality.Vector3@,Duality.Vector3@,System.Double@)">
            <summary>
            Returns the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The distance between two vectors as an output parameter.</param>
        </member>
        <member name="M:Duality.Vector3.DistanceSquared(Duality.Vector3,Duality.Vector3)">
            <summary>
            Returns the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between two vectors.</returns>
        </member>
        <member name="M:Duality.Vector3.DistanceSquared(Duality.Vector3@,Duality.Vector3@,System.Double@)">
            <summary>
            Returns the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The squared distance between two vectors as an output parameter.</param>
        </member>
        <member name="M:Duality.Vector3.Divide(Duality.Vector3,Duality.Vector3)">
            <summary>
            Divides the components of a <see cref="T:Duality.Vector3"/> by the components of another <see cref="T:Duality.Vector3"/>.
            </summary>
            <param name="value1">Source <see cref="T:Duality.Vector3"/>.</param>
            <param name="value2">Divisor <see cref="T:Duality.Vector3"/>.</param>
            <returns>The result of dividing the vectors.</returns>
        </member>
        <member name="M:Duality.Vector3.Divide(Duality.Vector3,System.Double)">
            <summary>
            Divides the components of a <see cref="T:Duality.Vector3"/> by a scalar.
            </summary>
            <param name="value1">Source <see cref="T:Duality.Vector3"/>.</param>
            <param name="divider">Divisor scalar.</param>
            <returns>The result of dividing a vector by a scalar.</returns>
        </member>
        <member name="M:Duality.Vector3.Divide(Duality.Vector3@,System.Double,Duality.Vector3@)">
            <summary>
            Divides the components of a <see cref="T:Duality.Vector3"/> by a scalar.
            </summary>
            <param name="value1">Source <see cref="T:Duality.Vector3"/>.</param>
            <param name="divider">Divisor scalar.</param>
            <param name="result">The result of dividing a vector by a scalar as an output parameter.</param>
        </member>
        <member name="M:Duality.Vector3.Divide(Duality.Vector3@,Duality.Vector3@,Duality.Vector3@)">
            <summary>
            Divides the components of a <see cref="T:Duality.Vector3"/> by the components of another <see cref="T:Duality.Vector3"/>.
            </summary>
            <param name="value1">Source <see cref="T:Duality.Vector3"/>.</param>
            <param name="value2">Divisor <see cref="T:Duality.Vector3"/>.</param>
            <param name="result">The result of dividing the vectors as an output parameter.</param>
        </member>
        <member name="M:Duality.Vector3.Dot(Duality.Vector3,Duality.Vector3)">
            <summary>
            Returns a dot product of two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The dot product of two vectors.</returns>
        </member>
        <member name="M:Duality.Vector3.Dot(Duality.Vector3@,Duality.Vector3@,System.Double@)">
            <summary>
            Returns a dot product of two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The dot product of two vectors as an output parameter.</param>
        </member>
        <member name="M:Duality.Vector3.Equals(System.Object)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Duality.Vector3.Equals(Duality.Vector3)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:Duality.Vector3"/>.
            </summary>
            <param name="other">The <see cref="T:Duality.Vector3"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Duality.Vector3.Floor">
            <summary>
            Round the members of this <see cref="T:Duality.Vector3"/> towards negative infinity.
            </summary>
        </member>
        <member name="M:Duality.Vector3.Floor(Duality.Vector3)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains members from another vector rounded towards negative infinity.
            </summary>
            <param name="value">Source <see cref="T:Duality.Vector3"/>.</param>
            <returns>The rounded <see cref="T:Duality.Vector3"/>.</returns>
        </member>
        <member name="M:Duality.Vector3.Floor(Duality.Vector3@,Duality.Vector3@)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains members from another vector rounded towards negative infinity.
            </summary>
            <param name="value">Source <see cref="T:Duality.Vector3"/>.</param>
            <param name="result">The rounded <see cref="T:Duality.Vector3"/>.</param>
        </member>
        <member name="M:Duality.Vector3.GetHashCode">
            <summary>
            Gets the hash code of this <see cref="T:Duality.Vector3"/>.
            </summary>
            <returns>Hash code of this <see cref="T:Duality.Vector3"/>.</returns>
        </member>
        <member name="M:Duality.Vector3.Lerp(Duality.Vector3,Duality.Vector3,System.Double)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains linear interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="amount">Weighting value(between 0.0 and 1.0).</param>
            <returns>The result of linear interpolation of the specified vectors.</returns>
        </member>
        <member name="M:Duality.Vector3.Lerp(Duality.Vector3@,Duality.Vector3@,System.Double,Duality.Vector3@)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains linear interpolation of the specified vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="amount">Weighting value(between 0.0 and 1.0).</param>
            <param name="result">The result of linear interpolation of the specified vectors as an output parameter.</param>
        </member>
        <member name="M:Duality.Vector3.Max(Duality.Vector3,Duality.Vector3)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains a maximal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The <see cref="T:Duality.Vector3"/> with maximal values from the two vectors.</returns>
        </member>
        <member name="M:Duality.Vector3.Max(Duality.Vector3@,Duality.Vector3@,Duality.Vector3@)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains a maximal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The <see cref="T:Duality.Vector3"/> with maximal values from the two vectors as an output parameter.</param>
        </member>
        <member name="M:Duality.Vector3.Min(Duality.Vector3,Duality.Vector3)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains a minimal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The <see cref="T:Duality.Vector3"/> with minimal values from the two vectors.</returns>
        </member>
        <member name="M:Duality.Vector3.Min(Duality.Vector3@,Duality.Vector3@,Duality.Vector3@)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains a minimal values from the two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">The <see cref="T:Duality.Vector3"/> with minimal values from the two vectors as an output parameter.</param>
        </member>
        <member name="M:Duality.Vector3.Multiply(Duality.Vector3,Duality.Vector3)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains a multiplication of two vectors.
            </summary>
            <param name="value1">Source <see cref="T:Duality.Vector3"/>.</param>
            <param name="value2">Source <see cref="T:Duality.Vector3"/>.</param>
            <returns>The result of the vector multiplication.</returns>
        </member>
        <member name="M:Duality.Vector3.Multiply(Duality.Vector3,System.Double)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains a multiplication of <see cref="T:Duality.Vector3"/> and a scalar.
            </summary>
            <param name="value1">Source <see cref="T:Duality.Vector3"/>.</param>
            <param name="scaleFactor">Scalar value.</param>
            <returns>The result of the vector multiplication with a scalar.</returns>
        </member>
        <member name="M:Duality.Vector3.Multiply(Duality.Vector3@,System.Double,Duality.Vector3@)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains a multiplication of <see cref="T:Duality.Vector3"/> and a scalar.
            </summary>
            <param name="value1">Source <see cref="T:Duality.Vector3"/>.</param>
            <param name="scaleFactor">Scalar value.</param>
            <param name="result">The result of the multiplication with a scalar as an output parameter.</param>
        </member>
        <member name="M:Duality.Vector3.Multiply(Duality.Vector3@,Duality.Vector3@,Duality.Vector3@)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains a multiplication of two vectors.
            </summary>
            <param name="value1">Source <see cref="T:Duality.Vector3"/>.</param>
            <param name="value2">Source <see cref="T:Duality.Vector3"/>.</param>
            <param name="result">The result of the vector multiplication as an output parameter.</param>
        </member>
        <member name="M:Duality.Vector3.Negate(Duality.Vector3)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains the specified vector inversion.
            </summary>
            <param name="value">Source <see cref="T:Duality.Vector3"/>.</param>
            <returns>The result of the vector inversion.</returns>
        </member>
        <member name="M:Duality.Vector3.Negate(Duality.Vector3@,Duality.Vector3@)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains the specified vector inversion.
            </summary>
            <param name="value">Source <see cref="T:Duality.Vector3"/>.</param>
            <param name="result">The result of the vector inversion as an output parameter.</param>
        </member>
        <member name="M:Duality.Vector3.Normalize">
            <summary>
            Turns this <see cref="T:Duality.Vector3"/> to a unit vector with the same direction.
            </summary>
        </member>
        <member name="M:Duality.Vector3.Normalize(Duality.Vector3)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains a normalized values from another vector.
            </summary>
            <param name="value">Source <see cref="T:Duality.Vector3"/>.</param>
            <returns>Unit vector.</returns>
        </member>
        <member name="M:Duality.Vector3.Normalize(Duality.Vector3@,Duality.Vector3@)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains a normalized values from another vector.
            </summary>
            <param name="value">Source <see cref="T:Duality.Vector3"/>.</param>
            <param name="result">Unit vector as an output parameter.</param>
        </member>
        <member name="M:Duality.Vector3.Reflect(Duality.Vector3,Duality.Vector3)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains reflect vector of the given vector and normal.
            </summary>
            <param name="vector">Source <see cref="T:Duality.Vector3"/>.</param>
            <param name="normal">Reflection normal.</param>
            <returns>Reflected vector.</returns>
        </member>
        <member name="M:Duality.Vector3.Reflect(Duality.Vector3@,Duality.Vector3@,Duality.Vector3@)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains reflect vector of the given vector and normal.
            </summary>
            <param name="vector">Source <see cref="T:Duality.Vector3"/>.</param>
            <param name="normal">Reflection normal.</param>
            <param name="result">Reflected vector as an output parameter.</param>
        </member>
        <member name="M:Duality.Vector3.Round">
            <summary>
            Round the members of this <see cref="T:Duality.Vector3"/> towards the nearest integer value.
            </summary>
        </member>
        <member name="M:Duality.Vector3.Round(Duality.Vector3)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains members from another vector rounded to the nearest integer value.
            </summary>
            <param name="value">Source <see cref="T:Duality.Vector3"/>.</param>
            <returns>The rounded <see cref="T:Duality.Vector3"/>.</returns>
        </member>
        <member name="M:Duality.Vector3.Round(Duality.Vector3@,Duality.Vector3@)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains members from another vector rounded to the nearest integer value.
            </summary>
            <param name="value">Source <see cref="T:Duality.Vector3"/>.</param>
            <param name="result">The rounded <see cref="T:Duality.Vector3"/>.</param>
        </member>
        <member name="M:Duality.Vector3.SmoothStep(Duality.Vector3,Duality.Vector3,System.Double)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains cubic interpolation of the specified vectors.
            </summary>
            <param name="value1">Source <see cref="T:Duality.Vector3"/>.</param>
            <param name="value2">Source <see cref="T:Duality.Vector3"/>.</param>
            <param name="amount">Weighting value.</param>
            <returns>Cubic interpolation of the specified vectors.</returns>
        </member>
        <member name="M:Duality.Vector3.SmoothStep(Duality.Vector3@,Duality.Vector3@,System.Double,Duality.Vector3@)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains cubic interpolation of the specified vectors.
            </summary>
            <param name="value1">Source <see cref="T:Duality.Vector3"/>.</param>
            <param name="value2">Source <see cref="T:Duality.Vector3"/>.</param>
            <param name="amount">Weighting value.</param>
            <param name="result">Cubic interpolation of the specified vectors as an output parameter.</param>
        </member>
        <member name="M:Duality.Vector3.Subtract(Duality.Vector3,Duality.Vector3)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains subtraction of on <see cref="T:Duality.Vector3"/> from a another.
            </summary>
            <param name="value1">Source <see cref="T:Duality.Vector3"/>.</param>
            <param name="value2">Source <see cref="T:Duality.Vector3"/>.</param>
            <returns>The result of the vector subtraction.</returns>
        </member>
        <member name="M:Duality.Vector3.Subtract(Duality.Vector3@,Duality.Vector3@,Duality.Vector3@)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains subtraction of on <see cref="T:Duality.Vector3"/> from a another.
            </summary>
            <param name="value1">Source <see cref="T:Duality.Vector3"/>.</param>
            <param name="value2">Source <see cref="T:Duality.Vector3"/>.</param>
            <param name="result">The result of the vector subtraction as an output parameter.</param>
        </member>
        <member name="M:Duality.Vector3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this <see cref="T:Duality.Vector3"/> in the format:
            {X:[<see cref="F:Duality.Vector3.X"/>] Y:[<see cref="F:Duality.Vector3.Y"/>] Z:[<see cref="F:Duality.Vector3.Z"/>]}
            </summary>
            <returns>A <see cref="T:System.String"/> representation of this <see cref="T:Duality.Vector3"/>.</returns>
        </member>
        <member name="M:Duality.Vector3.Transform(Duality.Vector3,Duality.Matrix4)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains a transformation of 3d-vector by the specified <see cref="T:Duality.Matrix4"/>.
            </summary>
            <param name="position">Source <see cref="T:Duality.Vector3"/>.</param>
            <param name="matrix">The transformation <see cref="T:Duality.Matrix4"/>.</param>
            <returns>Transformed <see cref="T:Duality.Vector3"/>.</returns>
        </member>
        <member name="M:Duality.Vector3.Transform(Duality.Vector3@,Duality.Matrix4@,Duality.Vector3@)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains a transformation of 3d-vector by the specified <see cref="T:Duality.Matrix4"/>.
            </summary>
            <param name="position">Source <see cref="T:Duality.Vector3"/>.</param>
            <param name="matrix">The transformation <see cref="T:Duality.Matrix4"/>.</param>
            <param name="result">Transformed <see cref="T:Duality.Vector3"/> as an output parameter.</param>
        </member>
        <member name="M:Duality.Vector3.Transform(Duality.Vector3,Duality.Quaternion)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains a transformation of 3d-vector by the specified <see cref="T:Duality.Quaternion"/>, representing the rotation.
            </summary>
            <param name="value">Source <see cref="T:Duality.Vector3"/>.</param>
            <param name="rotation">The <see cref="T:Duality.Quaternion"/> which contains rotation transformation.</param>
            <returns>Transformed <see cref="T:Duality.Vector3"/>.</returns>
        </member>
        <member name="M:Duality.Vector3.Transform(Duality.Vector3@,Duality.Quaternion@,Duality.Vector3@)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains a transformation of 3d-vector by the specified <see cref="T:Duality.Quaternion"/>, representing the rotation.
            </summary>
            <param name="value">Source <see cref="T:Duality.Vector3"/>.</param>
            <param name="rotation">The <see cref="T:Duality.Quaternion"/> which contains rotation transformation.</param>
            <param name="result">Transformed <see cref="T:Duality.Vector3"/> as an output parameter.</param>
        </member>
        <member name="M:Duality.Vector3.Transform(Duality.Vector3[],System.Int32,Duality.Matrix4@,Duality.Vector3[],System.Int32,System.Int32)">
            <summary>
            Apply transformation on vectors within array of <see cref="T:Duality.Vector3"/> by the specified <see cref="T:Duality.Matrix4"/> and places the results in an another array.
            </summary>
            <param name="sourceArray">Source array.</param>
            <param name="sourceIndex">The starting index of transformation in the source array.</param>
            <param name="matrix">The transformation <see cref="T:Duality.Matrix4"/>.</param>
            <param name="destinationArray">Destination array.</param>
            <param name="destinationIndex">The starting index in the destination array, where the first <see cref="T:Duality.Vector3"/> should be written.</param>
            <param name="length">The number of vectors to be transformed.</param>
        </member>
        <member name="M:Duality.Vector3.Transform(Duality.Vector3[],System.Int32,Duality.Quaternion@,Duality.Vector3[],System.Int32,System.Int32)">
            <summary>
            Apply transformation on vectors within array of <see cref="T:Duality.Vector3"/> by the specified <see cref="T:Duality.Quaternion"/> and places the results in an another array.
            </summary>
            <param name="sourceArray">Source array.</param>
            <param name="sourceIndex">The starting index of transformation in the source array.</param>
            <param name="rotation">The <see cref="T:Duality.Quaternion"/> which contains rotation transformation.</param>
            <param name="destinationArray">Destination array.</param>
            <param name="destinationIndex">The starting index in the destination array, where the first <see cref="T:Duality.Vector3"/> should be written.</param>
            <param name="length">The number of vectors to be transformed.</param>
        </member>
        <member name="M:Duality.Vector3.Transform(Duality.Vector3[],Duality.Matrix4@,Duality.Vector3[])">
            <summary>
            Apply transformation on all vectors within array of <see cref="T:Duality.Vector3"/> by the specified <see cref="T:Duality.Matrix4"/> and places the results in an another array.
            </summary>
            <param name="sourceArray">Source array.</param>
            <param name="matrix">The transformation <see cref="T:Duality.Matrix4"/>.</param>
            <param name="destinationArray">Destination array.</param>
        </member>
        <member name="M:Duality.Vector3.Transform(Duality.Vector3[],Duality.Quaternion@,Duality.Vector3[])">
            <summary>
            Apply transformation on all vectors within array of <see cref="T:Duality.Vector3"/> by the specified <see cref="T:Duality.Quaternion"/> and places the results in an another array.
            </summary>
            <param name="sourceArray">Source array.</param>
            <param name="rotation">The <see cref="T:Duality.Quaternion"/> which contains rotation transformation.</param>
            <param name="destinationArray">Destination array.</param>
        </member>
        <member name="M:Duality.Vector3.TransformNormal(Duality.Vector3,Duality.Matrix4)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains a transformation of the specified normal by the specified <see cref="T:Duality.Matrix4"/>.
            </summary>
            <param name="normal">Source <see cref="T:Duality.Vector3"/> which represents a normal vector.</param>
            <param name="matrix">The transformation <see cref="T:Duality.Matrix4"/>.</param>
            <returns>Transformed normal.</returns>
        </member>
        <member name="M:Duality.Vector3.TransformNormal(Duality.Vector3@,Duality.Matrix4@,Duality.Vector3@)">
            <summary>
            Creates a new <see cref="T:Duality.Vector3"/> that contains a transformation of the specified normal by the specified <see cref="T:Duality.Matrix4"/>.
            </summary>
            <param name="normal">Source <see cref="T:Duality.Vector3"/> which represents a normal vector.</param>
            <param name="matrix">The transformation <see cref="T:Duality.Matrix4"/>.</param>
            <param name="result">Transformed normal as an output parameter.</param>
        </member>
        <member name="M:Duality.Vector3.TransformNormal(Duality.Vector3[],System.Int32,Duality.Matrix4@,Duality.Vector3[],System.Int32,System.Int32)">
            <summary>
            Apply transformation on normals within array of <see cref="T:Duality.Vector3"/> by the specified <see cref="T:Duality.Matrix4"/> and places the results in an another array.
            </summary>
            <param name="sourceArray">Source array.</param>
            <param name="sourceIndex">The starting index of transformation in the source array.</param>
            <param name="matrix">The transformation <see cref="T:Duality.Matrix4"/>.</param>
            <param name="destinationArray">Destination array.</param>
            <param name="destinationIndex">The starting index in the destination array, where the first <see cref="T:Duality.Vector3"/> should be written.</param>
            <param name="length">The number of normals to be transformed.</param>
        </member>
        <member name="M:Duality.Vector3.TransformNormal(Duality.Vector3[],Duality.Matrix4@,Duality.Vector3[])">
            <summary>
            Apply transformation on all normals within array of <see cref="T:Duality.Vector3"/> by the specified <see cref="T:Duality.Matrix4"/> and places the results in an another array.
            </summary>
            <param name="sourceArray">Source array.</param>
            <param name="matrix">The transformation <see cref="!:Matrix"/>.</param>
            <param name="destinationArray">Destination array.</param>
        </member>
        <member name="M:Duality.Vector3.Deconstruct(System.Double@,System.Double@,System.Double@)">
            <summary>
            Deconstruction method for <see cref="T:Duality.Vector3"/>.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Duality.Vector3.op_Equality(Duality.Vector3,Duality.Vector3)">
            <summary>
            Compares whether two <see cref="T:Duality.Vector3"/> instances are equal.
            </summary>
            <param name="value1"><see cref="T:Duality.Vector3"/> instance on the left of the equal sign.</param>
            <param name="value2"><see cref="T:Duality.Vector3"/> instance on the right of the equal sign.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Duality.Vector3.op_Inequality(Duality.Vector3,Duality.Vector3)">
            <summary>
            Compares whether two <see cref="T:Duality.Vector3"/> instances are not equal.
            </summary>
            <param name="value1"><see cref="T:Duality.Vector3"/> instance on the left of the not equal sign.</param>
            <param name="value2"><see cref="T:Duality.Vector3"/> instance on the right of the not equal sign.</param>
            <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>	
        </member>
        <member name="M:Duality.Vector3.op_Addition(Duality.Vector3,Duality.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="value1">Source <see cref="T:Duality.Vector3"/> on the left of the add sign.</param>
            <param name="value2">Source <see cref="T:Duality.Vector3"/> on the right of the add sign.</param>
            <returns>Sum of the vectors.</returns>
        </member>
        <member name="M:Duality.Vector3.op_UnaryNegation(Duality.Vector3)">
            <summary>
            Inverts values in the specified <see cref="T:Duality.Vector3"/>.
            </summary>
            <param name="value">Source <see cref="T:Duality.Vector3"/> on the right of the sub sign.</param>
            <returns>Result of the inversion.</returns>
        </member>
        <member name="M:Duality.Vector3.op_Subtraction(Duality.Vector3,Duality.Vector3)">
            <summary>
            Subtracts a <see cref="T:Duality.Vector3"/> from a <see cref="T:Duality.Vector3"/>.
            </summary>
            <param name="value1">Source <see cref="T:Duality.Vector3"/> on the left of the sub sign.</param>
            <param name="value2">Source <see cref="T:Duality.Vector3"/> on the right of the sub sign.</param>
            <returns>Result of the vector subtraction.</returns>
        </member>
        <member name="M:Duality.Vector3.op_Multiply(Duality.Vector3,Duality.Vector3)">
            <summary>
            Multiplies the components of two vectors by each other.
            </summary>
            <param name="value1">Source <see cref="T:Duality.Vector3"/> on the left of the mul sign.</param>
            <param name="value2">Source <see cref="T:Duality.Vector3"/> on the right of the mul sign.</param>
            <returns>Result of the vector multiplication.</returns>
        </member>
        <member name="M:Duality.Vector3.op_Multiply(Duality.Vector3,System.Double)">
            <summary>
            Multiplies the components of vector by a scalar.
            </summary>
            <param name="value">Source <see cref="T:Duality.Vector3"/> on the left of the mul sign.</param>
            <param name="scaleFactor">Scalar value on the right of the mul sign.</param>
            <returns>Result of the vector multiplication with a scalar.</returns>
        </member>
        <member name="M:Duality.Vector3.op_Multiply(System.Double,Duality.Vector3)">
            <summary>
            Multiplies the components of vector by a scalar.
            </summary>
            <param name="scaleFactor">Scalar value on the left of the mul sign.</param>
            <param name="value">Source <see cref="T:Duality.Vector3"/> on the right of the mul sign.</param>
            <returns>Result of the vector multiplication with a scalar.</returns>
        </member>
        <member name="M:Duality.Vector3.op_Multiply(Duality.Vector3,Duality.Matrix4)">
            <summary>
            Transforms value by matrix
            </summary>
            <param name="value">Source <see cref="T:Duality.Vector3"/> on the left of the mul sign.</param>
            <param name="matrix">Matrix4 value on the left of the mul sign.</param>
            <returns>Result of the vector transformation with a matrix.</returns>
        </member>
        <member name="M:Duality.Vector3.op_Division(Duality.Vector3,Duality.Vector3)">
            <summary>
            Divides the components of a <see cref="T:Duality.Vector3"/> by the components of another <see cref="T:Duality.Vector3"/>.
            </summary>
            <param name="value1">Source <see cref="T:Duality.Vector3"/> on the left of the div sign.</param>
            <param name="value2">Divisor <see cref="T:Duality.Vector3"/> on the right of the div sign.</param>
            <returns>The result of dividing the vectors.</returns>
        </member>
        <member name="M:Duality.Vector3.op_Division(Duality.Vector3,System.Double)">
            <summary>
            Divides the components of a <see cref="T:Duality.Vector3"/> by a scalar.
            </summary>
            <param name="value1">Source <see cref="T:Duality.Vector3"/> on the left of the div sign.</param>
            <param name="divider">Divisor scalar on the right of the div sign.</param>
            <returns>The result of dividing a vector by a scalar.</returns>
        </member>
        <member name="T:Duality.Vector4">
            <summary>
            Represents a 4D vector using four single-precision floating-point numbers.
            </summary>
        </member>
        <member name="F:Duality.Vector4.UnitX">
            <summary>
            Defines a unit-length Vector4 that points towards the X-axis.
            </summary>
        </member>
        <member name="F:Duality.Vector4.UnitY">
            <summary>
            Defines a unit-length Vector4 that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:Duality.Vector4.UnitZ">
            <summary>
            Defines a unit-length Vector4 that points towards the Z-axis.
            </summary>
        </member>
        <member name="F:Duality.Vector4.UnitW">
            <summary>
            Defines a unit-length Vector4 that points towards the W-axis.
            </summary>
        </member>
        <member name="F:Duality.Vector4.Zero">
            <summary>
            Defines a zero-length Vector4.
            </summary>
        </member>
        <member name="F:Duality.Vector4.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
        </member>
        <member name="F:Duality.Vector4.X">
            <summary>
            The X component of the Vector4.
            </summary>
        </member>
        <member name="F:Duality.Vector4.Y">
            <summary>
            The Y component of the Vector4.
            </summary>
        </member>
        <member name="F:Duality.Vector4.Z">
            <summary>
            The Z component of the Vector4.
            </summary>
        </member>
        <member name="F:Duality.Vector4.W">
            <summary>
            The W component of the Vector4.
            </summary>
        </member>
        <member name="P:Duality.Vector4.Xy">
            <summary>
            Gets or sets an OpenTK.Vector2 with the X and Y components of this instance.
            </summary>
        </member>
        <member name="P:Duality.Vector4.Xyz">
            <summary>
            Gets or sets an OpenTK.Vector3 with the X, Y and Z components of this instance.
            </summary>
        </member>
        <member name="P:Duality.Vector4.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <seealso cref="P:Duality.Vector4.LengthSquared"/>
        </member>
        <member name="P:Duality.Vector4.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:Duality.Vector4.Length"/>
        </member>
        <member name="P:Duality.Vector4.Normalized">
            <summary>
            Returns a normalized version of this vector.
            </summary>
        </member>
        <member name="P:Duality.Vector4.Item(System.Int32)">
            <summary>
            Gets or sets the value at the index of the Vector.
            </summary>
        </member>
        <member name="M:Duality.Vector4.Normalize">
            <summary>
            Scales the Vector4 to unit length.
            </summary>
        </member>
        <member name="M:Duality.Vector4.#ctor(System.Double)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="value">The value that will initialize this instance.</param>
        </member>
        <member name="M:Duality.Vector4.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new Vector4.
            </summary>
            <param name="x">The x component of the Vector4.</param>
            <param name="y">The y component of the Vector4.</param>
            <param name="z">The z component of the Vector4.</param>
            <param name="w">The w component of the Vector4.</param>
        </member>
        <member name="M:Duality.Vector4.#ctor(Duality.Vector2)">
            <summary>
            Constructs a new Vector4 from the given Vector2.
            </summary>
            <param name="v">The Vector2 to copy components from.</param>
        </member>
        <member name="M:Duality.Vector4.#ctor(Duality.Vector2,System.Double)">
            <summary>
            Constructs a new Vector4 from the given Vector2.
            </summary>
            <param name="v">The Vector2 to copy components from.</param>
            <param name="z"></param>
        </member>
        <member name="M:Duality.Vector4.#ctor(Duality.Vector2,System.Double,System.Double)">
            <summary>
            Constructs a new Vector4 from the given Vector2.
            </summary>
            <param name="v">The Vector2 to copy components from.</param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:Duality.Vector4.#ctor(Duality.Vector3)">
            <summary>
            Constructs a new Vector4 from the given Vector3.
            The w component is initialized to 0.
            </summary>
            <param name="v">The Vector3 to copy components from.</param>
            <remarks><seealso cref="M:Duality.Vector4.#ctor(Duality.Vector3,System.Double)"/></remarks>
        </member>
        <member name="M:Duality.Vector4.#ctor(Duality.Vector3,System.Double)">
            <summary>
            Constructs a new Vector4 from the specified Vector3 and w component.
            </summary>
            <param name="v">The Vector3 to copy components from.</param>
            <param name="w">The w component of the new Vector4.</param>
        </member>
        <member name="M:Duality.Vector4.Add(Duality.Vector4@,Duality.Vector4@,Duality.Vector4@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <param name="result">Result of operation.</param>
        </member>
        <member name="M:Duality.Vector4.Subtract(Duality.Vector4@,Duality.Vector4@,Duality.Vector4@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:Duality.Vector4.Multiply(Duality.Vector4@,System.Double,Duality.Vector4@)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:Duality.Vector4.Multiply(Duality.Vector4@,Duality.Vector4@,Duality.Vector4@)">
            <summary>
            Multiplies a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:Duality.Vector4.Divide(Duality.Vector4@,System.Double,Duality.Vector4@)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:Duality.Vector4.Divide(Duality.Vector4@,Duality.Vector4@,Duality.Vector4@)">
            <summary>
            Divide a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:Duality.Vector4.Min(Duality.Vector4,Duality.Vector4)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:Duality.Vector4.Min(Duality.Vector4@,Duality.Vector4@,Duality.Vector4@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:Duality.Vector4.Max(Duality.Vector4,Duality.Vector4)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:Duality.Vector4.Max(Duality.Vector4@,Duality.Vector4@,Duality.Vector4@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:Duality.Vector4.Dot(Duality.Vector4,Duality.Vector4)">
            <summary>
            Calculate the dot product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:Duality.Vector4.Dot(Duality.Vector4@,Duality.Vector4@,System.Double@)">
            <summary>
            Calculate the dot product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:Duality.Vector4.Lerp(Duality.Vector4,Duality.Vector4,System.Double)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:Duality.Vector4.Lerp(Duality.Vector4@,Duality.Vector4@,System.Double,Duality.Vector4@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:Duality.Vector4.Transform(Duality.Vector4,Duality.Matrix4)">
            <summary>
            Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:Duality.Vector4.Transform(Duality.Vector4@,Duality.Matrix4@,Duality.Vector4@)">
            <summary>
            Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:Duality.Vector4.Transform(Duality.Vector4,Duality.Quaternion)">
            <summary>
            Transforms a vector by a quaternion rotation.
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="quat">The quaternion to rotate the vector by.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Duality.Vector4.Transform(Duality.Vector4@,Duality.Quaternion@,Duality.Vector4@)">
            <summary>
            Transforms a vector by a quaternion rotation.
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="quat">The quaternion to rotate the vector by.</param>
            <param name="result">The result of the operation.</param>
        </member>
        <member name="M:Duality.Vector4.op_Addition(Duality.Vector4,Duality.Vector4)">
            <summary>
            Adds two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:Duality.Vector4.op_Subtraction(Duality.Vector4,Duality.Vector4)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:Duality.Vector4.op_UnaryNegation(Duality.Vector4)">
            <summary>
            Negates an instance.
            </summary>
            <param name="vec">The instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:Duality.Vector4.op_Multiply(Duality.Vector4,System.Double)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:Duality.Vector4.op_Multiply(Duality.Vector4,Duality.Vector4)">
            <summary>
            Scales an instance by a vector.
            </summary>
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:Duality.Vector4.op_Multiply(System.Double,Duality.Vector4)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="scale">The scalar.</param>
            <param name="vec">The instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:Duality.Vector4.op_Division(Duality.Vector4,System.Double)">
            <summary>
            Divides an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:Duality.Vector4.op_Division(Duality.Vector4,Duality.Vector4)">
            <summary>
            Divides an instance by a vector.
            </summary>
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:Duality.Vector4.op_Equality(Duality.Vector4,Duality.Vector4)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left equals right; false otherwise.</returns>
        </member>
        <member name="M:Duality.Vector4.op_Inequality(Duality.Vector4,Duality.Vector4)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left does not equa lright; false otherwise.</returns>
        </member>
        <member name="M:Duality.Vector4.ToString">
            <summary>
            Returns a System.String that represents the current Vector4.
            </summary>
        </member>
        <member name="M:Duality.Vector4.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:Duality.Vector4.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:Duality.Vector4.Equals(Duality.Vector4)">
            <summary>
            Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="T:Duality.DontSerializeAttribute">
            <summary>
            Flags a class, struct or field as inappropriate for serialization.
            </summary>
        </member>
    </members>
</doc>
